#! /bin/bash
###############################################
##
##  Copyright (2019, ) Institute of Software
##      Chinese Academy of Sciences
##          wuheng@otcaixiscas.ac.cn
##         wuyuewen@otcaix.iscas.ac.cn
##              2019-9-24
##
###############################################

## Locate library

export LD_LIBRARY_PATH="/usr/lib64"


## OVN plugin version

VERSION="1.1.0"
IFCFG="/etc/sysconfig/network-scripts/"

## OVN Tables

TABLE_DNS="DNS"
TABLE_ACL="ACL"
TABLE_SWITCH="Logical_Switch"
TABLE_LOADBALANCER="Load_Balancer"
TABLE_GATEWAY="Gateway_Chassis"
TABLE_ROUTER="Logical_Router"
TABLE_LRSR="Logical_Router_Static_Route"

TABLE_LRP="Logical_Router_Port"
TABLE_LSP="Logical_Switch_Port"
TABLE_PORTGROUP="Port_Group"

TABLE_NBG="NB_Global"
TABLE_METER_BAND="Meter_Band"
TABLE_METWR="Meter"
TABLE_ADDR="Address_Set"
TABLE_QOS="QoS"
TABLE_NAT="NAT"
TABLE_CONN="Connection"
TABLE_SSL="SSL"
TABLE_DHCP="DHCP_Options"






## OVN core, please install Kubernetes first
MASTER=$(cat /root/.kube/config  | grep server |awk -F"server:" '{print$2}' | awk -F"https://" '{print$2}' | awk -F":" '{print$1}')

NB_PORT="6641"
SB_PORT="6642"

NB_CMD="ovn-nbctl --db=tcp:$MASTER:$NB_PORT"
SB_CMD="ovn-sbctl --db=tcp:$MASTER:$SB_PORT"



###########################################################
##
##  init env
##
##########################################################


function create-bridge()
{
  name=$(echo $* | awk -F"--name" '{print$2}' | awk '{print$1}')
  bridge=$(echo $* | awk -F"--bridge" '{print$2}' | awk '{print$1}')

  if [[ -z $1 || -z $name || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--name  \tNIC name" >&2
    echo -e "--bridge\tbrdige name(optinal), default is br-name" >&2
    exit 1
  fi

  if [[ -z $bridge ]]
  then
    bridge="br-"$name
  fi

  ################################
  if [[ ! -f $IFCFG"ifcfg-BRX" ]]
  then
     echo DEVICE=BRX     >> /etc/sysconfig/network-scripts/ifcfg-BRX
     echo DEVICETYPE=ovs >> /etc/sysconfig/network-scripts/ifcfg-BRX
     echo TYPE=OVSBridge >> /etc/sysconfig/network-scripts/ifcfg-BRX
     echo ONBOOT=yes >> /etc/sysconfig/network-scripts/ifcfg-BRX
  fi

  if [[ ! -f $IFCFG"ifcfg-ORG" ]]
  then
     echo TYPE=OVSPort         >> /etc/sysconfig/network-scripts/ifcfg-ORG
     echo DEVICE=ORG           >> /etc/sysconfig/network-scripts/ifcfg-ORG
     echo ONBOOT=yes           >> /etc/sysconfig/network-scripts/ifcfg-ORG
     echo DEVICETYPE=ovs       >> /etc/sysconfig/network-scripts/ifcfg-ORG
     echo OVS_BRIDGE=BRX >> /etc/sysconfig/network-scripts/ifcfg-ORG
  fi
  ################################


  ################################
  res=$(systemctl status openvswitch | grep Active | awk -F":" '{print $2}' | awk '{print$1}')
  if [[ $res != "active" ]]
  then
    echo "please start openvswitch first" >&2
    exit 1
  fi

  if [[ ! -f $IFCFG"ifcfg-$name" ]]
  then
    echo "wrong NIC name" >&2
    exit 1
  fi  

  ################################
  
  ################################
  if [[ ! -f $IFCFG"ifcfg-$name.bak" ]]
  then
    cp $IFCFG"ifcfg-$name" $IFCFG"ifcfg-$name.bak"
  fi

  rm -rf $IFCFG"ifcfg-$name"
  rm -rf $IFCFG"ifcfg-$bridge"

  cp $IFCFG"ifcfg-ORG" $IFCFG"ifcfg-$name"
  cp $IFCFG"ifcfg-BRX" $IFCFG"ifcfg-$bridge"

  ovs-vsctl --if-exist del-br $bridge
  ovs-vsctl add-br $bridge

  static=$(cat ifcfg-$name.bak | grep BOOTPROTO | grep static)
  ip=$(cat ifcfg-$name.bak | grep BOOTPROTO | grep IPADDR)
  mask=$(cat ifcfg-$name.bak | grep BOOTPROTO | grep NETMASK)
  gw=$(cat ifcfg-$name.bak | grep BOOTPROTO | grep GATEWAY)
  
  sed -i "s/BRX/$bridge/g" $IFCFG"ifcfg-$bridge"
  sed -i "s/BRX/$bridge/g" $IFCFG"ifcfg-$name"
  sed -i "s/ORG/$name/g" $IFCFG"ifcfg-$name"
  if [[ -z $static ]]
  then
    echo "BOOTPROTO=dhcp" >> $IFCFG"ifcfg-$bridge"
  else
    echo $ip >> $IFCFG"ifcfg-$bridge"
    echo $mask >> $IFCFG"ifcfg-$bridge"
    echo $gw >> $IFCFG"ifcfg-$bridge"
  fi

  ovs-vsctl add-port $bridge $name; systemctl restart network
}

function delete-bridge()
{
  name=$(echo $* | awk -F"--name" '{print$2}' | awk '{print$1}')
  bridge=$(echo $* | awk -F"--bridge" '{print$2}' | awk '{print$1}')

  if [[ -z $1 || -z $name || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--name  \tNIC name" >&2
    echo -e "--bridge\tbrdige name(optinal), default is br-name" >&2
    exit 1
  fi

  if [[ -z $bridge ]]
  then
    bridge="br-"$name
  fi

  ################################
  res=$(systemctl status openvswitch | grep Active | awk -F":" '{print $2}' | awk '{print$1}')
  if [[ $res != "active" ]]
  then
    echo "please start openvswitch first" >&2
    exit 1
  fi

  if [[ ! -f $IFCFG"ifcfg-$name" ]]
  then
    echo "wrong NIC name" >&2
    exit 1
  fi

  ################################

  rm -rf $IFCFG"ifcfg-$name"
  rm -rf $IFCFG"ifcfg-$bridge"
  
  mv -f $IFCFG"ifcfg-$name.bak" $IFCFG"ifcfg-$name"

  ovs-vsctl --if-exist del-br  $bridge; systemctl restart network

}

function start-central()
{
  systemctl start  openvswitch
  systemctl enable openvswitch
  systemctl start  ovn-ovsdb
  systemctl enable ovn-ovsdb
  systemctl start  ovn-northd
  systemctl enable ovn-northd
  systemctl start  ovn-controller
  systemctl enable ovn-controller

  sudo ovs-vsctl set open . external-ids:ovn-bridge=br-int
  sudo ovs-vsctl set open . external-ids:ovn-remote=unix:/usr/var/run/openvswitch/ovnsb_db.sock
  sudo ovs-vsctl set open . external-ids:ovn-encap-ip=127.0.0.1
  sudo ovs-vsctl set open . external-ids:ovn-encap-type=vxlan

  master=$(cat /root/.kube/config  | grep server | awk -F":" '{print$3}' | awk -F"//" '{print$2}')
  thisip=$(ip a | grep "br-native" | grep inet | awk '{print$2}' |awk -F"/" 'NR==1{print$1}')

  if [[ -z $master ]]
  then
    echo "undeployed Kubernetes or missing /root/.kube/config" >&2
    exit 1
  fi

  if [[ -z $thisip ]]
  then
    echo "the NIC does not exist, please initial br-native " >&2
    exit 1
  fi

  sudo ovs-vsctl set open . external-ids:ovn-remote=tcp:$master:6642
  sudo ovs-vsctl set open . external-ids:ovn-encap-ip=$thisip
}

function stop-central()
{
  systemctl stop    openvswitch
  systemctl disable openvswitch
  systemctl stop    ovn-ovsdb
  systemctl disable ovn-ovsdb
  systemctl stop    ovn-northd
  systemctl disable ovn-northd
  systemctl stop    ovn-controller
  systemctl disable ovn-controller
}

function start-worker()
{
  systemctl start  openvswitch
  systemctl enable openvswitch
  systemctl start  ovn-controller
  systemctl enable ovn-controller

  master=$(cat /root/.kube/config  | grep server | awk -F":" '{print$3}' | awk -F"//" '{print$2}')
  thisip=$(ip a | grep "br-native" | grep inet | awk '{print$2}' |awk -F"/" 'NR==1{print$1}')

  if [[ -z $master ]]
  then
    echo "undeployed Kubernetes or missing /root/.kube/config" >&2
    exit 1
  fi

  if [[ -z $thisip ]]
  then
    echo "the NIC does not exist, please initial br-native " >&2
    exit 1
  fi

  sudo ovs-vsctl set open . external-ids:ovn-bridge=br-int
  sudo ovs-vsctl set open . external-ids:ovn-remote=tcp:$master:6642
  sudo ovs-vsctl set open . external-ids:ovn-encap-type=vxlan
  sudo ovs-vsctl set open . external-ids:ovn-encap-ip=$thisip
  
  create-br-c-br br-native br-int
}

function stop-worker()
{
  systemctl stop    ovn-controller
  systemctl disable ovn-controller
}

function create-br-c-br()
{
  ovs-vsctl --may-exist add-port $1 patch-$2 -- set interface patch-$2 type=patch -- set interface patch-$2 option:peer=patch-$1
  ovs-vsctl --may-exist add-port $2 patch-$1 -- set interface patch-$1 type=patch -- set interface patch-$1 option:peer=patch-$2
}

###########################################################
##
##  l2
##
###########################################################


## Create a switch with a default DHCP

function create-switch()
{
  name=$(echo $* | awk -F"--name" '{print$2}' | awk '{print$1}')
  subn=$(echo $* | awk -F"--subnet" '{print$2}' | awk '{print$1}')
  
  if [[ -z $1 || -z $name || -z $subn || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--name  \tswitch name" >&2
    echo -e "--subnet\tIP range. for example, 192.168.1.0/24"  >&2
    exit 1
  fi

  sid=$($NB_CMD ls-list | grep "($name)" | awk '{print$1}')
  if [[ -n $sid ]]
  then
    echo "cannot connect the master or the switch name exists" >&2
    exit 1
  fi
  
  router='r4'$name
  rport='rp4'$name
  rmac=$(printf '00:60:2F:%02X:%02X:%02X\n' $[RANDOM%256] $[RANDOM%256] $[RANDOM%256])
  rip=$(echo $subn | awk -F"." '{print$1"."$2"."$3}')".1"
  rmk=$(echo $subn | awk -F"/" '{print$2}')
  $NB_CMD lr-add $router
  $NB_CMD lrp-add $router $rport $rmac $rip"/"$rmk
  
  sport='sp4'$name
  $NB_CMD ls-add $name
  $NB_CMD set Logical_Switch $name other_config:subnet=$subn
  $NB_CMD lsp-add $name $sport
  $NB_CMD lsp-set-type $sport router
  $NB_CMD lsp-set-addresses $sport $rmac
  $NB_CMD lsp-set-options $sport router-port=$rport

  #dmac=$(printf '00:60:2F:%02X:%02X:%02X\n' $[RANDOM%256] $[RANDOM%256] $[RANDOM%256])
  #dip=$(echo $subn | awk -F"." '{print$1"."$2"."$3}')".128" 
  did=$($NB_CMD create DHCP_Options cidr=$subn options="\"server_id\"=\"$rip\" \"server_mac\"=\"$rmac\" \"lease_time\"=\"3600\" \"router\"=\"$rip\"")
  $NB_CMD lsp-add $name "dhcpv4id-$name-"$did
}


## Remove a switch and the related DHCP

function remove-switch()
{
  name=$(echo $* | awk -F"--name" '{print$2}' | awk '{print$1}')
  
  if [[ -z $1 || -z $name || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--name  \tswitch name" >&2
    exit 1
  fi

  sid=$($NB_CMD ls-list | grep "($name)" | awk '{print$1}')
  if [[ -z $sid ]]
  then
    echo "cannot connect the master or the switch name does not exist" >&2
    exit 1
  fi
  
  router='r4'$name
  dhcpid=$($NB_CMD show $name | grep "dhcpv4id-$name-" | awk -F"dhcpv4id-$name-" '{print$2}')
  $NB_CMD ls-del $name  >/dev/null  2>&1 
  $NB_CMD lr-del $router >/dev/null  2>&1 
  $NB_CMD dhcp-options-del $dhcpid >/dev/null  2>&1  
}


## Bind a switch port

function bind-swport()
{
  mac=$(echo $* | awk -F"--mac" '{print$2}' | awk '{print$1}')
  switch=$(echo $* | awk -F"--switch" '{print$2}' | awk '{print$1}')
  
  if [[ -z $1 || -z $mac || -z $switch || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--switch    \tswitch name" >&2
    echo -e "--mac       \tvirtual NIC mac" >&2
    echo -e "--ip        \tvirtual NIC IP (optional)" >&2
    exit 1
  fi

  name=$(ovs-vsctl list interface | grep -A 14 "$mac" | grep name | awk -F"\"" '{print$2}')
  ip=$(echo $* | awk -F"--ip" '{print$2}' | awk '{print$1}')

  if [[ -z $ip ]]
  then
    ip='dynamic'
  fi

  sid=$($NB_CMD ls-list | grep "($switch)" |awk '{print$1}')
  if [[ -z $sid ]]
  then
    echo "cannot connect the master or the switch name does not exist" >&2
    exit 1
  fi

  nic=$(ovs-vsctl show | grep \""$name\"")
  if [[ -z $nic ]]
  then
    echo "NIC does not exist" >&2
    exit 1
  fi

  iface=$(ovs-vsctl get interface $name external_ids:iface-id | sed s/\"//g)
  ifmac=$(ovs-vsctl get interface $name external_ids:attached-mac | sed s/\"//g)
  dhcpid=$($NB_CMD show | grep "dhcpv4id-$switch-" | awk -F"dhcpv4id-$switch-" '{print$2}')
  $NB_CMD --if-exists lsp-del $iface
  $NB_CMD lsp-add $switch $iface
  $NB_CMD lsp-set-addresses $iface "$ifmac $ip"
  $NB_CMD lsp-set-dhcpv4-options $iface $dhcpid
  ovs-vsctl set interface $name external_ids:iface-id=$iface
}

## Unbind a switch port

function unbind-swport()
{
  mac=$(echo $* | awk -F"--mac" '{print$2}' | awk '{print$1}')
  
  if [[ -z $1 || -z $mac || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--mac      \tvirtual NIC mac" >&2
    exit 1
  fi

  iface=$($NB_CMD show | grep -B 1 "$mac"  | grep port | awk 'NR==1{print$2}')
  if [[ -z $iface ]]
  then
    echo "mac does not exist" >&2
    exit 1
  fi
  $NB_CMD --if-exists lsp-del $iface
}

# Set vlan id for port

function setport-vlan()
{
  mac=$(echo $* | awk -F"--mac" '{print$2}' | awk '{print$1}')
  vlan=$(echo $* | awk -F"--vlan" '{print$2}' | awk '{print$1}')

  if [[ -z $1 || -z $mac || -z $vlan || $2 == "--help" ]]
  then
    cmddesc 
    echo -e "--mac      \tvirtual NIC mac" >&2
    echo -e "--vlan      \tvlan id" >&2
    exit 1
  fi

  name=$(ovs-vsctl list interface | grep -A 14 "$mac" | grep name | awk -F"\"" '{print$2}')
  
  if [[ -z $name ]]
  then
    echo "NIC not exist." >&2
    exit 1
  fi

  ovs-vsctl set port $name tag=$vlan
}

# Delete port's vlan id

function delport-vlan()
{
  mac=$(echo $* | awk -F"--mac" '{print$2}' | awk '{print$1}')

  if [[ -z $1 || -z $mac || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--mac      \tvirtual NIC mac" >&2
    exit 1
  fi

  name=$(ovs-vsctl list interface | grep -A 14 "$mac" | grep name | awk -F"\"" '{print$2}')

  if [[ -z $name ]]
  then
    echo "NIC not exist." >&2
    exit 1
  fi

  vlan=$(ovs-vsctl get port $name tag)

  if echo $vlan | grep -q '[^0-9]'
  then
    exit 0
  fi
  
  ovs-vsctl remove port $name tag $vlan
}


# Set vxlan id for port

function setport-vxlan()
{
  mac=$(echo $* | awk -F"--mac" '{print$2}' | awk '{print$1}')
  vlan=$(echo $* | awk -F"--vxlan" '{print$2}' | awk '{print$1}')

  if [[ -z $1 || -z $mac || -z $vxlan || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--mac      \tvirtual NIC mac" >&2
    echo -e "--vxlan      \tvlan id" >&2
    exit 1
  fi

  name=$(ovs-vsctl list interface | grep -A 14 "$mac" | grep name | awk -F"\"" '{print$2}')
  
  if [[ -z $name ]]
  then
    echo "NIC not exist." >&2
    exit 1
  fi

  ovs-vsctl set port $name tag=$vxlan
}

# Delete port's vxlan id

function delport-vxlan()
{
  mac=$(echo $* | awk -F"--mac" '{print$2}' | awk '{print$1}')

  if [[ -z $1 || -z $mac || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--mac      \tvirtual NIC mac" >&2
    exit 1
  fi

  name=$(ovs-vsctl list interface | grep -A 14 "$mac" | grep name | awk -F"\"" '{print$2}')

  if [[ -z $name ]]
  then
    echo "NIC not exist." >&2
    exit 1
  fi

  vxlan=$(ovs-vsctl get port $name tag)

  if echo $vxlan | grep -q '[^0-9]'
  then
    exit 0
  fi
  
  ovs-vsctl remove port $name tag $vxlan
  ovs-vsctl set interface $name type=internal
}


function create-fip()
{
  name=$(echo $* | awk -F"--name" '{print$2}' | awk '{print$1}')
  ip=$(echo $* | awk -F"--ip" '{print$2}' | awk '{print$1}')

  if [[ -z $1 || -z $name || -z $ip || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--name      \tPhysical NIC name" >&2
    echo -e "--ip        \tFloating IP" >&2
    exit 1
  fi

  ne=$(ip a | grep $name)
  if [[ -z $ne ]]
  then
    echo "Physical NIC not exist" >&2
    exit 1
  fi

  ie=$(ip a | grep $ip)
  if [[ -n $ie ]]
  then
    echo "IP exist" >&2
    exit 1
  fi 

  for i in `seq 1 1000`
  do
    fname=$name":"$i
    if [[ -f /etc/sysconfig/network-scripts/ifcfg-$fname ]]
    then
      continue
    fi
    mask=$(ip a | grep -A 1 $name | grep inet | awk 'NR==1' |awk '{print$2}' | awk -F"/" '{print$2}')
    rm -rf /etc/sysconfig/network-scripts/ifcfg-$fname
    echo "DEVICE=$fname" >> /etc/sysconfig/network-scripts/ifcfg-$fname
    echo "BOOTPROTO=static" >> /etc/sysconfig/network-scripts/ifcfg-$fname
    echo "ONBOOT=yes" >> /etc/sysconfig/network-scripts/ifcfg-$fname
    echo "NM_CONTROLLED=no" >> /etc/sysconfig/network-scripts/ifcfg-$fname
    echo "IPADDR=$ip" >> /etc/sysconfig/network-scripts/ifcfg-$fname
    echo "PREFIX=$mask" >> /etc/sysconfig/network-scripts/ifcfg-$fname
    ifup $fname
    exit 0
  done

  echo "too much floating IPs" >&2
  exit 1   

}


function delete-fip()
{
  ip=$(echo $* | awk -F"--ip" '{print$2}' | awk '{print$1}')
  fname=$(ip a | grep $ip | awk '{print$8}')

  if [[ -z $1 || -z $ip || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--ip        \tFloating IP" >&2
    exit 1
  fi

  if [[ -z $fname ]]
  then
    echo "wrong IP, cannot find a NIC with the IP" >&2
    exit 1
  fi

  ifconfig $fname down
  rm -rf /etc/sysconfig/network-scripts/ifcfg-$fname
}

function bind-fip()
{
  switch=$(echo $* | awk -F"--switch" '{print$2}' | awk '{print$1}')
  vmmac=$(echo $* | awk -F"--vmmac" '{print$2}' | awk '{print$1}')
  fip=$(echo $* | awk -F"--fip" '{print$2}' | awk '{print$1}')
 
  if [[ -z $1 || -z $switch || -z $vmmac || -z $fip || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--switch  \tswitch name" >&2
    echo -e "--vmmac   \tvm mac" >&2
    echo -e "--fip     \tflating ip" >&2
    exit 1
  fi

  node=$(hostname)
  name=$(ovs-vsctl list interface | grep -A 14 "$vmmac" | grep name | awk -F"\"" '{print$2}')
  ne=$(ovs-vsctl show | grep "\"$name\"" | grep Port)
  if [[ -z $ne ]]
  then
    echo "mac does not exist" >&2
    exit 1
  fi

  nuuid=$($SB_CMD show | grep -B 1 "$node" | grep Chassis | awk -F"\"" '{print$2}')
  if [[ -z $nuuid ]]
  then
    echo "wrong node name" >&2
    exit 1
  fi

  
  sport='sp4'$name
  router='r4'$name
  rport='rp4'$name

  $NB_CMD lsp-add $switch $sport
  $NB_CMD lsp-set-addresses $sport dynamic
  rip=$($NB_CMD list logical_switch_port $sport | grep dynamic_addresses | awk -F"\"" '{print$2}' | awk '{print$2}')
  rmac=$($NB_CMD list logical_switch_port $sport | grep dynamic_addresses | awk -F"\"" '{print$2}' | awk '{print$1}')
  $NB_CMD lsp-del $sport

  rmk=$($NB_CMD show 'r4'$switch | grep networks | awk -F"\"" '{print$2}' | awk -F"/" '{print$2}')
  $NB_CMD lr-add $router
  $NB_CMD lrp-add $router $rport $rmac $rip"/"$rmk

  $NB_CMD lsp-add $switch $sport
  $NB_CMD lsp-set-type $sport router
  $NB_CMD lsp-set-addresses $sport $rmac
  $NB_CMD lsp-set-options $sport router-port=$rport
  $NB_CMD lrp-set-gateway-chassis $rport $nuuid

  #dhcpid=$($NB_CMD show $switch | grep "dhcpv4id-$name-" | awk -F"dhcpv4id-$switch-" '{print$2}')
  #$NB_CMD lsp-set-dhcpv4-options $sport $dhcpid

  lip=$($NB_CMD list logical_switch_port  | grep "$vmmac" | awk -F"\"" '{print$2}' | awk '{print$2}')
  $NB_CMD -- --id=@nat create nat type="dnat_and_snat" logical_ip=$lip external_ip=$fip -- add logical_router $router nat @nat
}

function unbind-fip()
{
  switch=$(echo $* | awk -F"--switch" '{print$2}' | awk '{print$1}')
  vmmac=$(echo $* | awk -F"--vmmac" '{print$2}' | awk '{print$1}')

  if [[ -z $1 || -z $switch || -z $vmmac || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--switch  \tswitch name" >&2
    echo -e "--vmmac   \tvm mac" >&2
    exit 1
  fi

  name=$(ovs-vsctl list interface | grep -A 14 "$vmmac" | grep name | awk -F"\"" '{print$2}')
  ne=$(ovs-vsctl show | grep "\"$name\"" | grep Port)
  if [[ -z $ne ]]
  then
    echo "mac does not exist" >&2
    exit 1
  fi

  sport='sp4'$name
  router='r4'$name

  $NB_CMD lr-del $router 
  $NB_CMD lsp-del $sport
}


###########################################################
##
##  help
##
##########################################################

function cmddesc()
{
  echo -e "Welcome to ovnctl, the ovn plugin for Kubernetes."
  echo -e "ovnctl($VERSION): missing command name (use --help for help)\n"
}


function help()
{
  cmddesc
  echo -e "Commands:"
  echo -e "  create-bridge:\tCreate L2 bridge"
  echo -e "  delete-bridge:\tDelete L2 bridge"
  echo -e "  start-central:\tStart central node"
  echo -e "  stop-central :\tStop central node"
  echo -e "  start-worker :\tStart worker node"
  echo -e "  stop-worker  :\tStop worker node"
  echo -e "  create-switch:\tCreate a switch with a dhcp"
  echo -e "  create-vpc   :\tCreate a switch with a dhcp, see create-switch"
  echo -e "  remove-switch:\tRemove a switch and the related dhcp"
  echo -e "  delete-switch:\tRemove a switch and the related dhcp, see remove-switch"
  echo -e "  delete-vpc   :\tRemove a switch and the related dhcp, see delete-vpc"
  echo -e "  bind-swport  :\tBind a switch port"
  echo -e "  unbind-swport:\tUnbind a switch port"
  echo -e "  setport-vlan :\tSet port with vlan ID"
  echo -e "  delport-vlan :\tDelete port's vlan ID"
  echo -e "  create-fip   :\tCreate floating IP"
  echo -e "  delete-fip   :\tDelete floating IP"
}


case $1 in
  "create-bridge")
    create-bridge $*
    ;;
  "delete-bridge")
    delete-bridge $*
    ;;
  "start-central")
    start-central $*
    ;;
  "stop-central")
    stop-central $*
    ;;
  "start-worker")
    start-worker $*
    ;;
  "stop-worker")
    stop-worker $*
    ;;
  "create-switch")
    create-switch $*
    ;;
  "create-vpc")
    create-switch $*
    ;;
  "remove-switch")
    remove-switch $*
    ;;
  "delete-switch")
    remove-switch $*
    ;;
  "delete-vpc")
    remove-switch $*
    ;;
  "bind-swport")
    bind-swport $*
    ;;
  "unbind-swport")
    unbind-swport $*
    ;;
  "setport-vlan")
    setport-vlan $*
    ;;
  "delport-vlan")
    delport-vlan $*
    ;;
  "create-fip")
    create-fip $*
    ;;
  "delete-fip")
    delete-fip $*
    ;;
  "bind-fip")
    bind-fip $*
    ;;
  "unbind-fip")
    unbind-fip $*
    ;;
  "--help")
    help
    ;;
  *)
  help
  ;;
esac

