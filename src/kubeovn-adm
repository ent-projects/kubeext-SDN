#! /bin/bash
###############################################
##
##  Copyright (2019, ) Institute of Software
##      Chinese Academy of Sciences
##          wuheng@iscas.ac.cn
##              2019-8-17
##
###############################################

## Locate library

export LD_LIBRARY_PATH="/usr/lib64"

## OVN Tables

TABLE_DNS="DNS"
TABLE_ACL="ACL"
TABLE_SWITCH="Logical_Switch"
TABLE_LOADBALANCER="Load_Balancer"
TABLE_GATEWAY="Gateway_Chassis"
TABLE_ROUTER="Logical_Router"
TABLE_LRSR="Logical_Router_Static_Route"

TABLE_LRP="Logical_Router_Port"
TABLE_LSP="Logical_Switch_Port"
TABLE_PORTGROUP="Port_Group"

TABLE_NBG="NB_Global"
TABLE_METER_BAND="Meter_Band"
TABLE_METWR="Meter"
TABLE_ADDR="Address_Set"
TABLE_QOS="QoS"
TABLE_NAT="NAT"
TABLE_CONN="Connection"
TABLE_SSL="SSL"
TABLE_DHCP="DHCP_Options"


## OVN core
MASTER=$(cat /root/.kube/config  | grep server |awk -F"server:" '{print$2}' | awk -F"https://" '{print$2}' | awk -F":" '{print$1}')

NB_PORT="6641"
SB_PORT="6642"

NB_CMD="ovn-nbctl --db=tcp:$MASTER:$NB_PORT"
SB_CMD="ovn-sbctl --db=tcp:$MASTER:$SB_PORT"

## OVN plugin version
VERSION="1.0.0"

#function dhcp()
#{
#  switch # ovn-nbctl set Logical_Switch ls1 other_config:subnet=192.168.1.0/24
#  worker # ovs-vsctl set interface vnet6 external_ids:iface-id=fee1a864-db30-4523-9568-dae1c01c69e4
#  master # ovn-nbctl lsp-add ls1 fee1a864-db30-4523-9568-dae1c01c69e4
#  master # ovn-nbctl lsp-set-addresses fee1a864-db30-4523-9568-dae1c01c69e4 "52:54:00:50:72:ea dynamic/static"
#  master # ovn-nbctl lsp-set-dhcpv4-options fee1a864-db30-4523-9568-dae1c01c69e4 b3460fec-4b8d-4078-b7f8-34c51a8adc3e
#}

## Create a switch with a default DHCP

function create-switch()
{
  name=$(echo $* | awk -F"--name" '{print$2}' | awk '{print$1}')
  subn=$(echo $* | awk -F"--subnet" '{print$2}' | awk '{print$1}')
  
  if [[ -z $1 || -z $name || -z $subn || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--name  \tswitch name"
    echo -e "--subnet\tIP range. for example, 192.168.1.0/24" 
    exit 1
  fi

  sid=$($NB_CMD ls-list | grep "($name)" | awk '{print$1}')
  if [[ -n $sid ]]
  then
    echo "cannot connect the master or the switch name exists"
    exit 1
  fi
  
  router='r4'$name
  rport='rp4'$name
  rmac=$(printf '00:60:2F:%02X:%02X:%02X\n' $[RANDOM%256] $[RANDOM%256] $[RANDOM%256])
  rip=$(echo $subn | awk -F"." '{print$1"."$2"."$3}')".1"
  rmk=$(echo $subn | awk -F"/" '{print$2}')
  $NB_CMD lr-add $router
  $NB_CMD lrp-add $router $rport $rmac $rip"/"$rmk
  
  sport='sp4'$name
  $NB_CMD ls-add $name
  $NB_CMD set Logical_Switch $name other_config:subnet=$subn
  $NB_CMD lsp-add $name $sport
  $NB_CMD lsp-set-type $sport router
  $NB_CMD lsp-set-addresses $sport $rmac
  $NB_CMD lsp-set-options $sport router-port=$rport

  dmac=$(printf '00:60:2F:%02X:%02X:%02X\n' $[RANDOM%256] $[RANDOM%256] $[RANDOM%256])
  dip=$(echo $subn | awk -F"." '{print$1"."$2"."$3}')".128" 
  sid=$($NB_CMD ls-list | grep "($name)" | awk '{print$1}')
  $NB_CMD create DHCP_Options cidr=$subn options="\"server_id\"=\"$dip\" \"server_mac\"=\"$dmac\" \"lease_time\"=\"3600\" \"router\"=\"$dip\" \"$name\"=\"$sid\""
}


## Remove a switch and the related DHCP

function remove-switch()
{
  name=$(echo $* | awk -F"--name" '{print$2}' | awk '{print$1}')
  
  if [[ -z $1 || -z $name || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--name  \tswitch name"
    exit 1
  fi

  sid=$($NB_CMD ls-list | grep "($name)" | awk '{print$1}')
  if [[ -z $sid ]]
  then
    echo "cannot connect the master or the switch name does not exist"
    exit 1
  fi
  
  router='r4'$name
  dhcpid=$($NB_CMD list DHCP_Options  | grep -B 3 "$sid"  | grep "_uuid" | awk -F":" '{print$2}')
  $NB_CMD ls-del $name
  $NB_CMD lr-del $router
  $NB_CMD dhcp-options-del $dhcpid
}


## Create a switch port

function create-swport()
{
  mac=$(echo $* | awk -F"--mac" '{print$2}' | awk '{print$1}')
  switch=$(echo $* | awk -F"--switch" '{print$2}' | awk '{print$1}')
  
  if [[ -z $1 || -z $mac || -z $switch || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--switch    \tswitch name"
    echo -e "--mac       \tvirtual NIC mac"
    echo -e "--ip        \tvirtual NIC IP (optional)"
    exit 1
  fi

  name=$(ip a | grep -B 1 "$mac" | awk -F":" 'NR==1{print$2}')
  ip=$(echo $* | awk -F"--ip" '{print$2}' | awk '{print$1}')
  
  if [[ -z $ip ]]
  then
    ip='dynamic'
  fi

  sid=$($NB_CMD ls-list | grep "($switch)" |awk '{print$1}')
  if [[ -z $sid ]]
  then
    echo "cannot connect the master or the switch name does not exist"
    exit 1
  fi

  nic=$(ovs-vsctl show | grep \""$name\"")
  if [[ -z $nic ]]
  then
    echo "NIC does not exist"
    exit 1
  fi

  iface=$(ovs-vsctl get interface $name external_ids:iface-id | sed s/\"//g)
  ifmac=$(ovs-vsctl get interface $name external_ids:attached-mac | sed s/\"//g)
  dhcpid=$($NB_CMD list DHCP_Options  | grep -B 3 "$sid"  | grep "_uuid" | awk -F":" '{print$2}')
  $NB_CMD lsp-add $switch $iface
  $NB_CMD lsp-set-addresses $iface "$ifmac $ip"
  $NB_CMD lsp-set-dhcpv4-options $iface $dhcpid
  ovs-vsctl set interface $name external_ids:iface-id=$iface
}

## Remove a switch port

function remove-swport()
{
  name=$(echo $* | awk -F"--name" '{print$2}' | awk '{print$1}')
  
  if [[ -z $1 || -z $name || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--name      \tvirtual NIC name"
    exit 1
  fi

  nic=$(ovs-vsctl show | grep \""$name\"")
  if [[ -z $nic ]]
  then
    echo "NIC does not exist"
    exit 1
  fi

  iface=$(ovs-vsctl get interface $name external_ids:iface-id | sed s/\"//g)
  $NB_CMD lsp-del $iface
}

# Set vlan id for port

function setport-vlan()
{
  name=$(echo $* | awk -F"--name" '{print$2}' | awk '{print$1}')
  vlan=$(echo $* | awk -F"--vlan" '{print$2}' | awk '{print$1}')

  if [[ -z $1 || -z $name || -z $vlan || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--name      \tvirtual NIC name"
    echo -e "--vlan      \tvlan id"
    exit 1
  fi

  vnet=$(ovs-vsctl show | grep "\"$name\"" | grep Port)
  
  if [[ -z $vnet ]]
  then
    echo "NIC not exist."
    exit 1
  fi

  ovs-vsctl set port $name tag=$vlan
}

# Delete port's vlan id

function delport-vlan()
{
  name=$(echo $* | awk -F"--name" '{print$2}' | awk '{print$1}')

  if [[ -z $1 || -z $name || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--name      \tvirtual NIC name"
    exit 1
  fi

  vnet=$(ovs-vsctl show | grep "\"$name\"" | grep Port)

  if [[ -z $vnet ]]
  then
    echo "NIC not exist."
    exit 1
  fi

  vlan=$(ovs-vsctl get port $name tag)

  if echo $vlan | grep -q '[^0-9]'
  then
    exit 0
  fi
  
  ovs-vsctl remove port $name tag $vlan
}

## All Helps

function help()
{
  cmddesc
  echo -e "Commands:"
  echo -e "  create-switch:\tCreate a switch with a dhcp"
  echo -e "  remove-switch:\tRemove a switch and the related dhcp"
  echo -e "  create-swport:\tCreate a switch port"
  echo -e "  remove-swport:\tDelete a switch port"
  echo -e "  setport-vlan :\tSet port with vlan ID"
  echo -e "  delport-vlan :\tDelete port's vlan ID"
}

function cmddesc()
{
  echo -e "Welcome to ovnctl, the ovn plugin for Kubernetes."
  echo -e "ovnctl($VERSION): missing command name (use --help for help)\n"
}

case $1 in
  "create-switch")
    create-switch $*
    ;;
  "remove-switch")
    remove-switch $*
    ;;
  "create-swport")
    create-swport $*
    ;;
  "remove-swport")
    remove-swport $*
    ;;
  "setport-vlan")
    setport-vlan $*
    ;;
  "delport-vlan")
    delport-vlan $*
    ;;
  "--help")
    help
    ;;
  *)
  help
  ;;
esac

