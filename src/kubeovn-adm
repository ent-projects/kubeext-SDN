#! /bin/bash
###############################################
##
##  Copyright (2019, ) Institute of Software
##      Chinese Academy of Sciences
##          wuheng@otcaixiscas.ac.cn
##         wuyuewen@otcaix.iscas.ac.cn
##              2019-9-24
##
###############################################

## Locate library

export LD_LIBRARY_PATH="/usr/lib64"


## OVN plugin version

VERSION="1.3.0"
IFCFG="/etc/sysconfig/network-scripts/"

## OVN Tables

TABLE_DNS="DNS"
TABLE_ACL="ACL"
TABLE_SWITCH="Logical_Switch"
TABLE_LOADBALANCER="Load_Balancer"
TABLE_GATEWAY="Gateway_Chassis"
TABLE_ROUTER="Logical_Router"
TABLE_LRSR="Logical_Router_Static_Route"

TABLE_LRP="Logical_Router_Port"
TABLE_LSP="Logical_Switch_Port"
TABLE_PORTGROUP="Port_Group"

TABLE_NBG="NB_Global"
TABLE_METER_BAND="Meter_Band"
TABLE_METWR="Meter"
TABLE_ADDR="Address_Set"
TABLE_QOS="QoS"
TABLE_NAT="NAT"
TABLE_CONN="Connection"
TABLE_SSL="SSL"
TABLE_DHCP="DHCP_Options"


## OVN core, please install Kubernetes first

MASTER=$(cat /root/.kube/config  | grep server |awk -F"server:" '{print$2}' | awk -F"https://" '{print$2}' | awk -F":" '{print$1}')
THISIP=$(kubectl get node $(hostname) -o yaml | grep -B 1 "type: InternalIP" | grep address | awk -F": " '{print$2}')


NB_PORT="6641"
SB_PORT="6642"

NB_CMD="ovn-nbctl --db=tcp:$MASTER:$NB_PORT"
SB_CMD="ovn-sbctl --db=tcp:$MASTER:$SB_PORT"


###########################################################
##
##  init env
##
##########################################################

function start-central()
{
  
  start-worker

  systemctl start   ovn-ovsdb
  systemctl enable  ovn-ovsdb
  systemctl start   ovn-northd
  systemctl enable  ovn-northd
  systemctl start   ovn-controller
  systemctl enable  ovn-controller

  sudo ovs-vsctl set open . external-ids:ovn-bridge=br-int
  sudo ovs-vsctl set open . external-ids:ovn-remote=unix:/usr/var/run/openvswitch/ovnsb_db.sock
  sudo ovs-vsctl set open . external-ids:ovn-encap-ip=127.0.0.1
  #sudo ovs-vsctl set open . external-ids:ovn-encap-type=geneve,vxlan
  sudo ovs-vsctl set open . external-ids:ovn-encap-type=geneve

}

function stop-central()
{
  stop-worker

  systemctl stop    ovn-ovsdb
  systemctl disable ovn-ovsdb
  systemctl stop    ovn-northd
  systemctl disable ovn-northd
}

function start-worker()
{

  systemctl start   openvswitch
  systemctl enable  openvswitch
  systemctl start   ovn-controller
  systemctl enable  ovn-controller
  systemctl start   ovn-controller-vtep
  systemctl enable  ovn-controller-vtep

  sudo ovs-vsctl set open . external-ids:ovn-bridge=br-int
  #sudo ovs-vsctl set open . external-ids:ovn-encap-type=geneve,vxlan
  sudo ovs-vsctl set open . external-ids:ovn-encap-type=geneve
  sudo ovs-vsctl set open . external-ids:ovn-remote=tcp:$MASTER:6642
  sudo ovs-vsctl set open . external-ids:ovn-encap-ip=$THISIP 
}

function stop-worker()
{
  systemctl stop    ovn-controller
  systemctl disable ovn-controller
  systemctl stop    ovn-controller-vtep
  systemctl disable ovn-controller-vtep
}

function clear()
{
  rm -rf /etc/openvswitch/*db* 2>&1
  rm -rf /etc/openvswitch/.* 2>&1
  rm -rf /etc/openvswitch/system-id.conf 2>&1
}


###########################################################
##
##  L2 bridge
##
##########################################################


function create-bridge()
{
  name=$(echo $* | awk -F"--name" '{print$2}' | awk '{print$1}')
  nic=$(echo $* | awk -F"--nic" '{print$2}' | awk '{print$1}')
  vlan=$(echo $* | awk -F"--vlan" '{print$2}' | awk '{print$1}')

  if [[ -z $1 || -z $name || -z $nic || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--name  \tbridge name" >&2
    echo -e "--nic   \tnic name" >&2
    echo -e "--vlan  \tvlan id, default is \"vlan=0\"" >&2
    exit 1
  fi

  if [[ -z $vlan ]]
  then
    vlan=0
  fi

  ################################
  if [[ ! -f $IFCFG"ifcfg-BRX" ]]
  then
     echo DEVICE=BRX           >> /etc/sysconfig/network-scripts/ifcfg-BRX
     echo DEVICETYPE=ovs       >> /etc/sysconfig/network-scripts/ifcfg-BRX
     echo TYPE=OVSBridge       >> /etc/sysconfig/network-scripts/ifcfg-BRX
     echo ONBOOT=yes           >> /etc/sysconfig/network-scripts/ifcfg-BRX
  fi

  if [[ ! -f $IFCFG"ifcfg-ORG" ]]
  then
     echo TYPE=OVSPort         >> /etc/sysconfig/network-scripts/ifcfg-ORG
     echo DEVICE=ORG           >> /etc/sysconfig/network-scripts/ifcfg-ORG
     echo ONBOOT=yes           >> /etc/sysconfig/network-scripts/ifcfg-ORG
     echo DEVICETYPE=ovs       >> /etc/sysconfig/network-scripts/ifcfg-ORG
     echo OVS_BRIDGE=BRX       >> /etc/sysconfig/network-scripts/ifcfg-ORG
  fi
  ################################
  ################################
  res=$(systemctl status openvswitch | grep Active | awk -F":" '{print $2}' | awk '{print$1}')
  if [[ $res != "active" ]]
  then
    echo "please start openvswitch first" >&2
    exit 1
  fi

  if [[ ! -f $IFCFG"ifcfg-$nic" ]]
  then
    echo "wrong NIC name" >&2
    exit 1
  fi  

  ################################
  ################################
  
  if [[ ! -f $IFCFG"ifcfg-$nic.bak" ]]
  then
    cp $IFCFG"ifcfg-$nic" $IFCFG"ifcfg-$nic.bak"
  fi

  rm -rf $IFCFG"ifcfg-$nic"
  rm -rf $IFCFG"ifcfg-$name"

  mv $IFCFG"ifcfg-ORG" $IFCFG"ifcfg-$nic"
  mv $IFCFG"ifcfg-BRX" $IFCFG"ifcfg-$name"

  ovs-vsctl --if-exist del-br $name
  ovs-vsctl add-br $name
  ovs-vsctl add-br $name"-"$vlan $name $vlan
  ovs-vsctl set interface $name"-"$vlan type=internal

  static=$(cat $IFCFG"ifcfg-$nic.bak" | grep BOOTPROTO | grep static)
  ip=$(cat $IFCFG"ifcfg-$nic.bak" | grep IPADDR)
  mask=$(cat $IFCFG"ifcfg-$nic.bak" | grep NETMASK)
  prefix=$(cat $IFCFG"ifcfg-$nic.bak" |  grep PREFIX)
  gw=$(cat $IFCFG"ifcfg-$nic.bak" | grep GATEWAY)
  dns=$(cat $IFCFG"ifcfg-$nic.bak" | grep DNS)
  
  sed -i "s/BRX/$name/g" $IFCFG"ifcfg-$name"
  sed -i "s/BRX/$name/g" $IFCFG"ifcfg-$nic"
  sed -i "s/ORG/$nic/g" $IFCFG"ifcfg-$nic"
  if [[ -z $static ]]
  then
    echo "BOOTPROTO=dhcp" >> $IFCFG"ifcfg-$name"
  else
    echo $ip >> $IFCFG"ifcfg-$name"
    echo $mask >> $IFCFG"ifcfg-$name"
    echo $prefix >> $IFCFG"ifcfg-$name"
    echo $gw >> $IFCFG"ifcfg-$name"
    echo $dns >> $IFCFG"ifcfg-$name"
  fi

  ovs-vsctl add-port $name $nic && ifdown $nic && ifup $nic && ifup $name
  ip link set dev $nic promisc on
  ip link set dev $name promisc on
}

function delete-bridge()
{
  name=$(echo $* | awk -F"--name" '{print$2}' | awk '{print$1}')
  nic=$(echo $* | awk -F"--nic" '{print$2}' | awk '{print$1}')

  if [[ -z $1 || -z $nic || -z $nic || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--name  \tbridge name" >&2
    echo -e "--nic   \tnic name" >&2
    exit 1
  fi

  ################################
  res=$(systemctl status openvswitch | grep Active | awk -F":" '{print $2}' | awk '{print$1}')
  if [[ $res != "active" ]]
  then
    echo "please start openvswitch first" >&2
    exit 1
  fi

  if [[ ! -f $IFCFG"ifcfg-$nic" ]]
  then
    echo "wrong NIC name" >&2
    exit 1
  fi

  ################################

  rm -rf $IFCFG"ifcfg-$name"

  if [[ ! -f $IFCFG"ifcfg-$nic.bak" ]]
  then
    echo "$nic is not a part of openvswitch" >&2
    exit 1
  fi 
  rm -rf $IFCFG"ifcfg-$nic"

 
  mv -f $IFCFG"ifcfg-$nic.bak" $IFCFG"ifcfg-$nic"

  ovs-vsctl --if-exist del-br $name && ifdown $nic && ifup $nic

}

# Set vlan id for port

function setbridge-vlan()
{
  name=$(echo $* | awk -F"--name" '{print$2}' | awk '{print$1}')
  vlan=$(echo $* | awk -F"--vlan" '{print$2}' | awk '{print$1}')

  if [[ -z $1 || -z $name || -z $vlan || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--name     \tbridge name" >&2
    echo -e "--vlan     \tvlan id" >&2
    exit 1
  fi


  ovs-vsctl add-br $name"-"$vlan $name $vlan
  ovs-vsctl set interface $name"-"$vlan type=internal  
}

# Delete port's vlan id

function delbridge-vlan()
{

  name=$(echo $* | awk -F"--name" '{print$2}' | awk '{print$1}')
  vlan=$(echo $* | awk -F"--vlan" '{print$2}' | awk '{print$1}')

  if [[ -z $1 || -z $name || -z $vlan || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--name    \tbridge name" >&2
    echo -e "--vlan    \tvlan" >&2
    exit 1
  fi

  res=$(ovs-vsctl br-to-parent $name"-"$vlan)

  if [[ $res != $name ]]
  then
    echo "wrong vlan id in bridge $name" >&2
    exit 1
  fi

  ovs-vsctl --if-exist del-br $name"-"$vlan
}


###########################################################
##
##  l3 switch
##
###########################################################


## Create a switch with a default DHCP

function create-switch()
{
  name=$(echo $* | awk -F"--name" '{print$2}' | awk '{print$1}')
  subn=$(echo $* | awk -F"--subnet" '{print$2}' | awk '{print$1}')
  gway=$(echo $* | awk -F"--gateway" '{print$2}' | awk '{print$1}')
  dhcp=$(echo $* | awk -F"--dhcp" '{print$2}' | awk '{print$1}')
  imtu=$(echo $* | awk -F"--mtu" '{print$2}' | awk '{print$1}')
  excl=$(echo $* | awk -F"--excludeIPs" '{print$2}' | awk '{print$1}')
  dnss=$(echo $* | awk -F"--dnsServer" '{print$2}' | awk '{print$1}')
  
  if [[ -z $1 || -z $name || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--name       \tswitch name" >&2
    echo -e "--subnet     \toptinal, IP range. for example, 192.168.1.0/24"  >&2
    echo -e "--gateway    \toptinal, gateway.  for example, 192.168.1.1"  >&2
    echo -e "--mtu        \toptinal, mtu.  for example, 1480"  >&2
    echo -e "--dhcp       \toptinal, dhcp"  >&2
    echo -e "--excludeIPs \toptinal, excludeIPs.  192.168.1.1,192.168.1.10..192.168.1.100"  >&2
    echo -e "--dnsServer  \toptinal, dnsServer.  192.168.1.1"  >&2
    exit 1
  fi

  sid=$($NB_CMD ls-list | grep "($name)" | awk '{print$1}')
  if [[ -n $sid ]]
  then
    echo "cannot connect the master or the switch name exists" >&2
    exit 1
  fi
 
  $NB_CMD ls-add $name

  if [[ -n $excl ]]
  then
    nexcl=$(echo ${excl//,/ })
    $NB_CMD set Logical_Switch $name other_config:exclude_ips="$nexcl"
  fi
 
  if [[ -n $subn ]]
  then
  
    mtu="1500"
    if [[ -n $imtu ]]
    then
      mtu=$imtu
    fi
 
    if [[ -n $dhcp ]]
    then
      router=$name"-router"
      rport=$name"-router-port"
      rmac=$(printf '00:60:2F:%02X:%02X:%02X\n' $[RANDOM%256] $[RANDOM%256] $[RANDOM%256])
 
      $NB_CMD lr-add $router
      rmk=$(echo $subn | awk -F"/" '{print$2}')
      $NB_CMD lrp-add $router $rport $rmac $dhcp"/"$rmk
  
      sport='to-'$rport
      $NB_CMD lsp-add $name $sport
      $NB_CMD lsp-set-type $sport router
      $NB_CMD lsp-set-addresses $sport $rmac
      $NB_CMD lsp-set-options $sport router-port=$rport

      if [[ -z $dnss ]]
      then
        did=$($NB_CMD create DHCP_Options cidr=$subn options="\"server_id\"=\"$dhcp\" \"server_mac\"=\"$rmac\" \"lease_time\"=\"3600\" \"router\"=\"$gway\" \"mtu\"=\"$mtu\"")
      else
        did=$($NB_CMD create DHCP_Options cidr=$subn options="\"server_id\"=\"$dhcp\" \"server_mac\"=\"$rmac\" \"lease_time\"=\"3600\" \"router\"=\"$gway\" \"mtu\"=\"$mtu\" \"dns_server\"=\"$dnss\"")
      fi

      $NB_CMD lsp-add $name "dhcpv4id-$name-"$did
      fi
  fi

}

## Remove a switch and the related DHCP

function modify-switch()
{
  name=$(echo $* | awk -F"--name" '{print$2}' | awk '{print$1}')
  gway=$(echo $* | awk -F"--gateway" '{print$2}' | awk '{print$1}')
  dhcp=$(echo $* | awk -F"--dhcp" '{print$2}' | awk '{print$1}')
  imtu=$(echo $* | awk -F"--mtu" '{print$2}' | awk '{print$1}')
  dnss=$(echo $* | awk -F"--dnsServer" '{print$2}' | awk '{print$1}')

  if [[ -z $1 || -z $name || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--name       \tswitch name" >&2
    echo -e "--gateway    \toptinal, gateway.  for example, 192.168.1.1"  >&2
    echo -e "--dhcp       \toptinal, dhcp.  for example, 192.168.1.1"  >&2
    echo -e "--mtu        \toptinal, mtu.  for example, 1480"  >&2
    echo -e "--dnsServer  \toptinal, dns server"  >&2
    exit 1
  fi
  
  dhcpid=$($NB_CMD show $name | grep "dhcpv4id-$name-" | awk -F "dhcpv4id-$name-" '{print$2}') 
 
  thisdhcp=$($NB_CMD dhcp-options-get-options $dhcpid | grep "server_id" | awk -F"=" '{print$2}')
  thisgway=$($NB_CMD dhcp-options-get-options $dhcpid | grep "router" | awk -F"=" '{print$2}')
  rmac=$($NB_CMD dhcp-options-get-options $dhcpid | grep "server_mac" | awk -F"=" '{print$2}')
  thismtu=$($NB_CMD dhcp-options-get-options $dhcpid | grep "mtu" | awk -F"=" '{print$2}')
  thisdns=$($NB_CMD dhcp-options-get-options $dhcpid | grep "dns_server" | awk -F"=" '{print$2}')

  if [[ -n $dhcp ]]
  then
    thisdhcp=$dhcp
  fi

  if [[ -n $gway ]]
  then
    thisgway=$gway
  fi

  if [[ -n $imtu ]]
  then
    thismtu=$imtu
  fi

  if [[ -n $dnss  ]]
  then
    thisdns=$dnss
  fi

  cmd="$dhcpid server_mac=$rmac lease_time=3600 mtu=$thismtu"
  if [[ -n $thisdhcp ]]
  then
    cmd=$cmd" server_id=$thisdhcp"
  fi

  if [[ -n $thisgway ]]
  then
    cmd=$cmd" router=$thisgway"
  fi

  if [[ -n $thisdns ]]
  then
    cmd=$cmd" dns_server=$thisdns"
  fi

  $($NB_CMD dhcp-options-set-options $cmd)

}

function remove-switch()
{
  name=$(echo $* | awk -F"--name" '{print$2}' | awk '{print$1}')
  
  if [[ -z $1 || -z $name || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--name  \tswitch name" >&2
    exit 1
  fi

  ## check
  checkOVSStatus
  
  sid=$($NB_CMD ls-list | grep "($name)" | awk '{print$1}')
  if [[ -z $sid ]]
  then
    echo "cannot connect the master or the switch name does not exist" >&2
    exit 1
  fi
  
  ## delete
  router=$name"-router"
  dhcpid=$($NB_CMD show $name | grep "dhcpv4id-$name-" | awk -F"dhcpv4id-$name-" '{print$2}')
  $NB_CMD ls-del $name  >/dev/null  2>&1 
  $NB_CMD lr-del $router >/dev/null  2>&1
  $NB_CMD dhcp-options-del $dhcpid >/dev/null  2>&1  
}

## Bind a switch port

function bind-swport()
{
  mac=$(echo $* | awk -F"--mac" '{print$2}' | awk '{print$1}')
  switch=$(echo $* | awk -F"--switch" '{print$2}' | awk '{print$1}')
  
  if [[ -z $1 || -z $mac || -z $switch || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--switch    \tswitch name" >&2
    echo -e "--mac       \tvirtual NIC mac" >&2
    echo -e "--ip        \tvirtual NIC IP (optional)" >&2
    exit 1
  fi

  name=$(ovs-vsctl list interface | grep -A 14 "$mac" | grep name | awk -F"\"" '{print$2}')
  ip=$(echo $* | awk -F"--ip" '{print$2}' | awk '{print$1}')

  if [[ -z $ip ]]
  then
    ip='dynamic'
  fi

  sid=$($NB_CMD ls-list | grep "($switch)" |awk '{print$1}')
  if [[ -z $sid ]]
  then
    echo "cannot connect the master or the switch name does not exist" >&2
    exit 1
  fi

  nic=$(ovs-vsctl show | grep \""$name\"")
  if [[ -z $nic ]]
  then
    echo "NIC does not exist" >&2
    exit 1
  fi

  iface=$(ovs-vsctl get interface $name external_ids:iface-id | sed s/\"//g)
  ifmac=$(ovs-vsctl get interface $name external_ids:attached-mac | sed s/\"//g)
  dhcpid=$($NB_CMD show | grep "dhcpv4id-$switch-" | awk -F"dhcpv4id-$switch-" '{print$2}')
  $NB_CMD --if-exists lsp-del $iface
  $NB_CMD lsp-add $switch $iface
  $NB_CMD lsp-set-addresses $iface "$ifmac $ip"
  $NB_CMD lsp-set-dhcpv4-options $iface $dhcpid
  ovs-vsctl set interface $name external_ids:iface-id=$iface
}

## Unbind a switch port

function unbind-swport()
{
  mac=$(echo $* | awk -F"--mac" '{print$2}' | awk '{print$1}')
  
  if [[ -z $1 || -z $mac || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--mac      \tvirtual NIC mac" >&2
    exit 1
  fi

  iface=$($NB_CMD show | grep -B 1 "$mac"  | grep port | awk 'NR==1{print$2}')
  if [[ -z $iface ]]
  then
    echo "mac does not exist" >&2
    exit 1
  fi
  $NB_CMD --if-exists lsp-del $iface
}

# Set vxlan id for port

function setport-vxlan()
{
  mac=$(echo $* | awk -F"--mac" '{print$2}' | awk '{print$1}')
  vlan=$(echo $* | awk -F"--vxlan" '{print$2}' | awk '{print$1}')

  if [[ -z $1 || -z $mac || -z $vxlan || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--mac      \tvirtual NIC mac" >&2
    echo -e "--vxlan      \tvlan id" >&2
    exit 1
  fi

  name=$(ovs-vsctl list interface | grep -A 14 "$mac" | grep name | awk -F"\"" '{print$2}')
  
  if [[ -z $name ]]
  then
    echo "NIC not exist." >&2
    exit 1
  fi

  ovs-vsctl set port $name tag=$vxlan
}

# Delete port's vxlan id

function delport-vxlan()
{
  mac=$(echo $* | awk -F"--mac" '{print$2}' | awk '{print$1}')

  if [[ -z $1 || -z $mac || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--mac      \tvirtual NIC mac" >&2
    exit 1
  fi

  name=$(ovs-vsctl list interface | grep -A 14 "$mac" | grep name | awk -F"\"" '{print$2}')

  if [[ -z $name ]]
  then
    echo "NIC not exist." >&2
    exit 1
  fi

  vxlan=$(ovs-vsctl get port $name tag)

  if echo $vxlan | grep -q '[^0-9]'
  then
    exit 0
  fi
  
  ovs-vsctl remove port $name tag $vxlan
  ovs-vsctl set interface $name type=internal
}

function create-fip()
{
  name=$(echo $* | awk -F"--name" '{print$2}' | awk '{print$1}')
  ip=$(echo $* | awk -F"--ip" '{print$2}' | awk '{print$1}')

  if [[ -z $1 || -z $name || -z $ip || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--name      \tPhysical NIC name" >&2
    echo -e "--ip        \tFloating IP" >&2
    exit 1
  fi

  ne=$(ip a | grep $name)
  if [[ -z $ne ]]
  then
    echo "Physical NIC not exist" >&2
    exit 1
  fi

  ie=$(ip a | grep $ip)
  if [[ -n $ie ]]
  then
    echo "IP exist" >&2
    exit 1
  fi 

  for i in `seq 1 1000`
  do
    fname=$name":"$i
    if [[ -f /etc/sysconfig/network-scripts/ifcfg-$fname ]]
    then
      continue
    fi
    mask=$(ip a | grep -A 1 $name | grep inet | awk 'NR==1' |awk '{print$2}' | awk -F"/" '{print$2}')
    rm -rf /etc/sysconfig/network-scripts/ifcfg-$fname
    echo "DEVICE=$fname" >> /etc/sysconfig/network-scripts/ifcfg-$fname
    echo "BOOTPROTO=static" >> /etc/sysconfig/network-scripts/ifcfg-$fname
    echo "ONBOOT=yes" >> /etc/sysconfig/network-scripts/ifcfg-$fname
    echo "NM_CONTROLLED=no" >> /etc/sysconfig/network-scripts/ifcfg-$fname
    echo "IPADDR=$ip" >> /etc/sysconfig/network-scripts/ifcfg-$fname
    echo "PREFIX=$mask" >> /etc/sysconfig/network-scripts/ifcfg-$fname
    ifup $fname
    exit 0
  done

  echo "too much floating IPs" >&2
  exit 1   

}


function delete-fip()
{
  ip=$(echo $* | awk -F"--ip" '{print$2}' | awk '{print$1}')
  fname=$(ip a | grep $ip | awk '{print$NF}')

  if [[ -z $1 || -z $ip || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--ip        \tFloating IP" >&2
    exit 1
  fi

  if [[ -z $fname ]]
  then
    echo "wrong IP, cannot find a NIC with the IP" >&2
    exit 1
  fi

  ifconfig $fname down
  rm -rf /etc/sysconfig/network-scripts/ifcfg-$fname
}


###########################################################
##
##  ACL
##
###########################################################

function create-acl()
{
  do=$(echo $* | awk -F"--domain" '{print$2}' | awk '{print$1}')
  sw=$(echo $* | awk -F"--swName" '{print$2}' | awk '{print$1}')
  vm=$(echo $* | awk -F"--vmmac" '{print$2}' | awk '{print$1}')
  tp=$(echo $* | awk -F"--type" '{print$2}' | awk '{print$1}')
  rl=$(echo $* | awk -F"--rule" '{print$2}' | awk '{print$1}')
  op=$(echo $* | awk -F"--operator" '{print$2}' | awk '{print$1}')
  pr=$(echo $* | awk -F"--priority" '{print$2}' | awk '{print$1}')
  
  if [[ -z $1 || -z $sw || -z $vm || -z $tp || -z $rl || -z $op || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--domain     \tdomain" >&2
    echo -e "--swName     \tswitch" >&2
    echo -e "--vmmac      \tmac" >&2
    echo -e "--type       \ttype, from or to"  >&2
    echo -e "--rule       \trule, tcp.dest=1"  >&2
    echo -e "--operator   \tallow or drop"  >&2
    echo -e "--priority   \toptional, 1-1000"  >&2
    exit 1
  fi
  
  ## check 
  sid=$($NB_CMD ls-list | grep "($sw)" | awk '{print$1}')
  if [[ -z $sid ]]
  then
    echo "switch not exist" >&2
    exit 1
  fi
  
  ftport=""
  ioport=""
  if [[ $tp == "from" ]]
  then
    ftport="from-lport"
    ioport="inport"
  elif [[ $tp == "to" ]]
  then
    ftport="to-lport"
    ioport="outport"
  else
    echo "wrong type, must be neither 'from' or 'to'" >&2
    exit 1
  fi
  
  operator=""
  if [[ $op == "allow" ]]
  then
    operator="allow-related"
  elif [[ $op == "drop" ]]
  then
    operator="drop"
  else
    echo "wrong operator, must be neither 'allow' or 'drop'" >&2
    exit 1
  fi
  
  if [[ -z $pr ]]
  then
    pr="100"
  fi
    
  port=$($NB_CMD show | grep -B 1 "$vm" | grep port | awk '{print$2}')
  
  rule=""
  
  if [[ -z $port ]]
  then
    rule=$ioport" == "$rl
  else
    rule=$ioport" == \"$port\" && "$rl
  fi
  
  $NB_CMD acl-add $sw $ftport $pr "$rule" $operator
}

function modify-acl()
{
  delete-acl $*
  create-acl $*
}

# [--type={switch | port-group}] acl-del entity [direction [priority match]]
function delete-acl()
{
  do=$(echo $* | awk -F"--domain" '{print$2}' | awk '{print$1}')
  sw=$(echo $* | awk -F"--swName" '{print$2}' | awk '{print$1}')
  vm=$(echo $* | awk -F"--vmmac" '{print$2}' | awk '{print$1}')
  tp=$(echo $* | awk -F"--type" '{print$2}' | awk '{print$1}')
  rl=$(echo $* | awk -F"--rule" '{print$2}' | awk '{print$1}')
  pr=$(echo $* | awk -F"--priority" '{print$2}' | awk '{print$1}')
  
  if [[ -z $1 || -z $sw || -z $vm || -z $tp || -z $rl || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--domain     \tdomain" >&2
    echo -e "--swName     \tswitch" >&2
    echo -e "--vmmac      \tmac" >&2
    echo -e "--type       \toptional, type, from or to"  >&2
    echo -e "--rule       \toptional, rule, tcp.dest=1"  >&2
    echo -e "--priority   \toptional, 1-1000"  >&2
    exit 1
  fi
  
  ## check 
  sid=$($NB_CMD ls-list | grep "($sw)" | awk '{print$1}')
  if [[ -z $sid ]]
  then
    echo "switch not exist" >&2
    exit 1
  fi
  
  ftport=""
  ioport=""
  if [[ $tp == "from" ]]
  then
    ftport="from-lport"
    ioport="inport"
  elif [[ $tp == "to" ]]
  then
    ftport="to-lport"
    ioport="outport"
  else
    echo "wrong type, must be neither 'from' or 'to'" >&2
    exit 1
  fi
  
  if [[ -z $pr ]]
  then
    pr="100"
  fi
    
  port=$($NB_CMD show | grep -B 1 "$vm" | grep port | awk '{print$2}')
  
  rule=""
  
  if [[ -z $port ]]
  then
    rule=$ioport" == "$rl
  else
    rule=$ioport" == \"$port\" && "$rl
  fi
 
  $NB_CMD acl-del $sw $ftport $pr "$rule"
}


###########################################################
##
##  QoS
##
##########################################################

# [--may-exist] qos-add switch direction priority match [dscp=dscp] [rate=rate [burst=burst]]
function create-qos()
{
  do=$(echo $* | awk -F"--domain" '{print$2}' | awk '{print$1}')
  sw=$(echo $* | awk -F"--swName" '{print$2}' | awk '{print$1}')
  vm=$(echo $* | awk -F"--vmmac" '{print$2}' | awk '{print$1}')
  tp=$(echo $* | awk -F"--type" '{print$2}' | awk '{print$1}')
  po=$(echo $* | awk -F"--protocol" '{print$2}' | awk '{print$1}')
  rt=$(echo $* | awk -F"--rate" '{print$2}' | awk '{print$1}')
  bu=$(echo $* | awk -F"--burst" '{print$2}' | awk '{print$1}')
  pr=$(echo $* | awk -F"--priority" '{print$2}' | awk '{print$1}')
  
  if [[ -z $1 || -z $sw || -z $vm || -z $tp || -z $po || -z $rt || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--domain     \tdomain" >&2
    echo -e "--swName     \tswitch" >&2
    echo -e "--vmmac      \tmac" >&2
    echo -e "--type       \ttype, from or to"  >&2
    echo -e "--protocol   \tprotocol, IP, tcp"  >&2
    echo -e "--rate       \trate, kbps"  >&2
	echo -e "--burst      \toptional, burst, kbps"  >&2
    echo -e "--priority   \toptional, 1-32767"  >&2
    exit 1
  fi
  
  ## check 
  sid=$($NB_CMD ls-list | grep "($sw)" | awk '{print$1}')
  if [[ -z $sid ]]
  then
    echo "switch not exist" >&2
    exit 1
  fi
  
  ftport=""
  if [[ $tp == "from" ]]
  then
    ftport="from-lport"
  elif [[ $tp == "to" ]]
  then
    ftport="to-lport"
  else
    echo "wrong type, must be neither 'from' or 'to'" >&2
    exit 1
  fi
  
  if [[ -z $pr ]]
  then
    pr="100"
  fi
      
  name="public-"${vmmac//:/}"-"$(hostname)
  cmd=""
  if [[ -z $bu ]]
  then  
    cmd="$NB_CMD qos-add "$name" "$ftport" "$pr" "$po" rate="$rt
  else
    cmd="$NB_CMD qos-add "$name" "$ftport" "$pr" "$po" rate="$rt" burst="$bu
  fi
  $(cmd)
}

# qos-del switch [direction [priority match]]
function modify-qos()
{
  delete-qos $*
  create-qos $*
}

# qos-del switch [direction [priority match]]
function delete-qos()
{
  do=$(echo $* | awk -F"--domain" '{print$2}' | awk '{print$1}')
  sw=$(echo $* | awk -F"--swName" '{print$2}' | awk '{print$1}')
  vm=$(echo $* | awk -F"--vmmac" '{print$2}' | awk '{print$1}')
  tp=$(echo $* | awk -F"--type" '{print$2}' | awk '{print$1}')
  po=$(echo $* | awk -F"--protocol" '{print$2}' | awk '{print$1}')
  pr=$(echo $* | awk -F"--priority" '{print$2}' | awk '{print$1}')
  
  if [[ -z $1 || -z $sw || -z $vm || -z $tp || -z $po || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--domain     \tdomain" >&2
    echo -e "--swName     \tswitch" >&2
    echo -e "--vmmac      \tmac" >&2
    echo -e "--type       \ttype, from or to"  >&2
    echo -e "--protocol   \tprotocol, IP, tcp"  >&2
    echo -e "--priority   \toptional, 1-32767"  >&2
    exit 1
  fi
  
  ## check 
  sid=$($NB_CMD ls-list | grep "($sw)" | awk '{print$1}')
  if [[ -z $sid ]]
  then
    echo "switch not exist" >&2
    exit 1
  fi
  
  ftport=""
  if [[ $tp == "from" ]]
  then
    ftport="from-lport"
  elif [[ $tp == "to" ]]
  then
    ftport="to-lport"
  else
    echo "wrong type, must be neither 'from' or 'to'" >&2
    exit 1
  fi
  
  if [[ -z $pr ]]
  then
    pr="100"
  fi
      
  name="public-"${vmmac//:/}"-"$(hostname)
  cmd="$NB_CMD qos-del "$name" "$ftport" "$pr" "$po
  $(cmd)
}
###########################################################
##
##  help
##
##########################################################

function cmddesc()
{
  echo -e "Welcome to ovnctl, the ovn plugin for Kubernetes."
  echo -e "ovnctl($VERSION): missing command name (use --help for help)\n"
}


function help()
{
  cmddesc
  echo -e "Commands:"
  echo -e "  start-central  :\t(Init): Start central node"
  echo -e "  stop-central   :\t(Init): Stop  central node"
  echo -e "  start-worker   :\t(Init): Start worker  node"
  echo -e "  stop-worker    :\t(Init): Stop  worker  node"
  echo -e "  create-bridge  :\t(L2  ): Create L2 bridge"
  echo -e "  delete-bridge  :\t(L2  ): Delete L2 bridge"
  echo -e "  create-fip     :\t(L2  ): Create L2's floating IP"
  echo -e "  delete-fip     :\t(L2  ): Delete L2's floating IP"
  echo -e "  create-switch  :\t(L3  ): Create L3 switch and gateway"
  echo -e "  modify-switch  :\t(L3  ): Modify L3 switch's config"
  echo -e "  delete-switch  :\t(L3  ): Remove L3 switch and gateway, see remove-switch"
  echo -e "  create-qos     :\t(QoS ): create QoS for floating IP"
  echo -e "  modify-qos     :\t(QoS ): modify QoS for floating IP"
  echo -e "  delete-qos     :\t(QoS ): delete QoS for floating IP"
  echo -e "  bind-fip       :\t(L3  ): bind floating IP"
  echo -e "  unbind-fip     :\t(L3  ): Unbind floating IP"
  echo -e "  bind-swport    :\t(L3  ): Bind a L3's port to OVN"
  echo -e "  unbind-swport  :\t(L3  ): Unbind a L3's port from OVN"
  echo -e "  create-acl     :\t(ACL ): create access control list"
  echo -e "  modify-acl     :\t(ACL ): modify access control list"
  echo -e "  delete-acl     :\t(ACL ): delete access control list"
}


case $1 in
  "start-central")
    start-central $*
    ;;
  "stop-central")
    stop-central $*
    ;;
  "start-worker")
    start-worker $*
    ;;
  "stop-worker")
    stop-worker $*
    ;;
  "create-bridge")
    create-bridge $*
    ;;
  "delete-bridge")
    delete-bridge $*
    ;;
  "create-switch")
    create-switch $*
    ;;
  "modify-switch")
    modify-switch $*
    ;;
  "delete-switch")
    remove-switch $*
    ;;
  "bind-swport")
    bind-swport $*
    ;;
  "unbind-swport")
    unbind-swport $*
    ;;
  "create-fip")
    create-fip $*
    ;;
  "delete-fip")
    delete-fip $*
    ;;
  "bind-fip")
    bind-fip $*
    ;;
  "unbind-fip")
    unbind-fip $*
    ;;
  "create-acl")
    create-acl $*
    ;;
  "modify-acl")
    modify-acl $*
    ;;
  "delete-acl")
    delete-acl $*
    ;;
  "create-qos")
    create-qos $*
    ;;
  "modify-qos")
    modify-acl $*
    ;;
  "delete-qos")
    delete-acl $*
    ;;
  "--help")
    help
    ;;
  *)
  help
  ;;
esac
