master="192.168.42.144"
nic="ens33"

NB_PORT="6641"

NB_CMD="ovn-nbctl --db=tcp:$master:$NB_PORT"

### Init

function start-central()
{
  systemctl restart openvswitch
  systemctl enable  openvswitch
  systemctl start   ovn-ovsdb
  systemctl enable  ovn-ovsdb
  systemctl start   ovn-northd
  systemctl enable  ovn-northd
  systemctl start   ovn-controller
  systemctl enable  ovn-controller
  systemctl start   ovn-controller-vtep
  systemctl enable  ovn-controller-vtep

  sudo ovs-vsctl set open . external-ids:ovn-bridge=br-int
  sudo ovs-vsctl set open . external-ids:ovn-remote=unix:/usr/var/run/openvswitch/ovnsb_db.sock
  sudo ovs-vsctl set open . external-ids:ovn-encap-ip=127.0.0.1
  sudo ovs-vsctl set open . external-ids:ovn-encap-type=geneve

  sudo ovs-vsctl set open . external-ids:ovn-remote=tcp:$master:6642
  sudo ovs-vsctl set open . external-ids:ovn-encap-ip=$(thisIP)

}

function stop-central()
{
  systemctl stop    ovn-ovsdb
  systemctl disable ovn-ovsdb
  systemctl stop    ovn-northd
  systemctl disable ovn-northd
  systemctl stop    ovn-controller
  systemctl disable ovn-controller
  systemctl stop    ovn-controller-vtep
  systemctl disable ovn-controller-vtep

}

function start-worker()
{
  systemctl restart openvswitch
  systemctl enable  openvswitch
  systemctl start   ovn-controller
  systemctl enable  ovn-controller
  systemctl start   ovn-controller-vtep
  systemctl enable  ovn-controller-vtep

  sudo ovs-vsctl set open . external-ids:ovn-bridge=br-int
  sudo ovs-vsctl set open . external-ids:ovn-encap-type=geneve
  sudo ovs-vsctl set open . external-ids:ovn-remote=tcp:$master:6642
  sudo ovs-vsctl set open . external-ids:ovn-encap-ip=$(thisIP)

}

function stop-worker()
{
  systemctl stop    ovn-controller
  systemctl disable ovn-controller
  systemctl stop    ovn-controller-vtep
  systemctl disable ovn-controller-vtep

}

function thisIP()
{
  ip=$(ifconfig $nic | grep "inet " | awk '{print$2}')
  echo $ip
}

### L3

function create-switch()
{
  name=$(echo $* | awk -F"--name" '{print$2}' | awk '{print$1}')
  subn=$(echo $* | awk -F"--subnet" '{print$2}' | awk '{print$1}')
  gway=$(echo $* | awk -F"--gateway" '{print$2}' | awk '{print$1}')
  imtu=$(echo $* | awk -F"--mtu" '{print$2}' | awk '{print$1}')
  excl=$(echo $* | awk -F"--excludeIPs" '{print$2}' | awk '{print$1}')
  dnss=$(echo $* | awk -F"--dnsServer" '{print$2}' | awk '{print$1}')
  
  if [[ -z $1 || -z $name || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--name       \tswitch name" >&2
    echo -e "--subnet     \toptinal, IP range. for example, 192.168.1.0/24"  >&2
    echo -e "--gateway    \toptinal, gateway.  for example, 192.168.1.1"  >&2
    echo -e "--mtu        \toptinal, mtu.  for example, 1480"  >&2
    echo -e "--excludeIPs \toptinal, excludeIPs.  192.168.1.1,192.168.1.10..192.168.1.100"  >&2
    echo -e "--dnsServer  \toptinal, dnsServer.  192.168.1.1"  >&2
    exit 1
  fi

  sid=$($NB_CMD ls-list | grep "($name)" | awk '{print$1}')
  if [[ -n $sid ]]
  then
    echo "cannot connect the master or the switch name exists" >&2
    exit 1
  fi
 
  $NB_CMD ls-add $name

  if [[ -n $excl ]]
  then
    nexcl=$(echo ${excl//,/ })
    $NB_CMD set Logical_Switch $name other_config:exclude_ips="$nexcl"
  fi
 
  if [[ -n $subn ]]
  then
    router='r4'$name
    rport='rp4'$name
    rmac=$(printf '00:60:2F:%02X:%02X:%02X\n' $[RANDOM%256] $[RANDOM%256] $[RANDOM%256])
    
    rip=$(echo $subn | awk -F"." '{print$1"."$2"."$3}')".1"
    if [[ -n $gway ]]
    then
      rip=$gway
    fi
   
    mtu="1500"
    if [[ -n $imtu ]]
    then
      mtu=$imtu
    fi
 
    rmk=$(echo $subn | awk -F"/" '{print$2}')
    $NB_CMD lr-add $router
    $NB_CMD lrp-add $router $rport $rmac $rip"/"$rmk
  
    sport='sp4'$name
    $NB_CMD set Logical_Switch $name other_config:subnet=$subn
    $NB_CMD lsp-add $name $sport
    $NB_CMD lsp-set-type $sport router
    $NB_CMD lsp-set-addresses $sport $rmac
    $NB_CMD lsp-set-options $sport router-port=$rport

    if [[ -z $dnss ]]
    then
      did=$($NB_CMD create DHCP_Options cidr=$subn options="\"server_id\"=\"$rip\" \"server_mac\"=\"$rmac\" \"lease_time\"=\"3600\" \"router\"=\"$rip\" \"mtu\"=\"$mtu\"")
    else
      did=$($NB_CMD create DHCP_Options cidr=$subn options="\"server_id\"=\"$rip\" \"server_mac\"=\"$rmac\" \"lease_time\"=\"3600\" \"router\"=\"$rip\" \"mtu\"=\"$mtu\" \"dns_server\"=\"$dnss\"")
    fi

    $NB_CMD lsp-add $name "dhcpv4id-$name-"$did
  fi

}

function delete-switch()
{
  name=$(echo $* | awk -F"--name" '{print$2}' | awk '{print$1}')
  
  if [[ -z $1 || -z $name || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--name  \tswitch name" >&2
    exit 1
  fi

  sid=$($NB_CMD ls-list | grep "($name)" | awk '{print$1}')
  if [[ -z $sid ]]
  then
    echo "cannot connect the master or the switch name does not exist" >&2
    exit 1
  fi
  
  router='r4'$name
  dhcpid=$($NB_CMD show $name | grep "dhcpv4id-$name-" | awk -F"dhcpv4id-$name-" '{print$2}')
  $NB_CMD ls-del $name  >/dev/null  2>&1 
  $NB_CMD lr-del $router >/dev/null  2>&1
  $NB_CMD dhcp-options-del $dhcpid >/dev/null  2>&1  
}


### vm 
function create-vm()
{
  name=$(echo $* | awk -F"--name" '{print$2}' | awk '{print$1}')
  switch=$(echo $* | awk -F"--switch" '{print$2}' | awk '{print$1}')
  nic=$(echo $* | awk -F"--nic" '{print$2}' | awk '{print$1}')
  mac=$(echo $* | awk -F"--mac" '{print$2}' | awk '{print$1}')
  ip=$(echo $* | awk -F"--ip" '{print$2}' | awk '{print$1}')
  gway=$(echo $* | awk -F"--gateway" '{print$2}' | awk '{print$1}')

  if [[ -z $1 || -z $name || -z $nic || -z $mac || -z gway || -z $ip || $2 == "--help" ]]
  then
    echo -e "--name       \tVM name" >&2
    echo -e "--switch     \tSee kubeovn create-switch" >&2
    echo -e "--nic        \tNIC"  >&2
    echo -e "--mac        \tMac"  >&2
    echo -e "--ip         \tIP"  >&2
    echo -e "--gateway    \tGateway"  >&2
    exit 1
  fi

  sudo ip netns add $name
  sudo ip link add $name-$nic type veth peer name veth-$name
  sudo ip link set veth-$name up
  sudo ip link set $name-$nic netns $name
  sudo ip netns exec $name ip link set $name-$nic addres $mac
  sudo ip netns exec $name ip link set $name-$nic up
  sudo ovs-vsctl add-port br-int veth-$name

  sudo $NB_CMD lsp-add $switch $switch-$name
  sudo $NB_CMD lsp-set-addresses $switch-$name "$mac $ip"
  
  sudo ovs-vsctl set Interface  veth-$name external_ids:iface-id=$switch-$name
  sudo ip netns exec $name ip addr add $ip/24 dev $name-$nic
  sudo ip netns exec $name ip route add default via $gway
}

function delete-vm()
{
  name=$(echo $* | awk -F"--name" '{print$2}' | awk '{print$1}')
  
  if [[ -z $1 || -z $name || $2 == "--help" ]]
  then
    echo -e "--name       \tVM name" >&2
    exit 1
  fi

  sudo $NB_CMD lsp-del "vpc1-"$name
  sudo ovs-vsctl del-port br-int "veth-"$name
  sudo ip netns del $name
}

function help()
{
  echo -e "Commands:"
  echo -e "  start-central  :\t(Init): start central node"
  echo -e "  stop-central   :\t(Init): stop  central node"
  echo -e "  start-worker   :\t(Init): start worker  node"
  echo -e "  stop-worker    :\t(Init): stop  worker  node"
  echo -e "  create-switch  :\t(L3  ): Create L3 switch and gateway"
  echo -e "  delete-switch  :\t(L3  ): Remove L3 switch and gateway"
  echo -e "  create-vm      :\t(Simu): create a VM"
  echo -e "  delete-vm      :\t(Simu): delete a VM"
}

case $1 in
  "start-central")
    start-central $*
    ;;
  "stop-central")
    stop-central $*
    ;;
  "start-worker")
    start-worker $*
    ;;
  "stop-worker")
    stop-worker $*
    ;;
  "create-switch")
    create-switch $*
    ;;
  "delete-switch")
    delete-switch $*
    ;;
  "create-vm")
    create-vm $*
    ;;
  "delete-vm")
    delete-vm $*
    ;;
  *)
  help
  ;;
esac
