###################################################
###
###  Copyright (2019, ) Institute of Software
###           Chinese Academy of Sciences
###         Author: wuheng@otcaix.iscas.ac.cn
###
###
####################################################

MASTER=$(cat /etc/ovn-emulator.conf | grep master | awk -F"=" '{print$2}')
THISIP=$(cat /etc/ovn-emulator.conf | grep thisip | awk -F"=" '{print$2}')

NB_PORT="6641"
SB_PORT="6642"

NB_CMD="ovn-nbctl --db=tcp:$MASTER:$NB_PORT"
SB_CMD="ovn-sbctl --db=tcp:$MASTER:$SB_PORT"

###########################################################
##
##  init env
##
##########################################################

function start-central()
{
  
  start-worker

  systemctl start   ovn-ovsdb
  systemctl enable  ovn-ovsdb
  systemctl start   ovn-northd
  systemctl enable  ovn-northd
  systemctl start   ovn-controller
  systemctl enable  ovn-controller

  sudo ovs-vsctl set open . external-ids:ovn-bridge=br-int
  sudo ovs-vsctl set open . external-ids:ovn-remote=unix:/usr/var/run/openvswitch/ovnsb_db.sock
  sudo ovs-vsctl set open . external-ids:ovn-encap-ip=127.0.0.1
  #sudo ovs-vsctl set open . external-ids:ovn-encap-type=geneve,vxlan
  sudo ovs-vsctl set open . external-ids:ovn-encap-type=geneve

}

function stop-central()
{
  stop-worker

  systemctl stop    ovn-ovsdb
  systemctl disable ovn-ovsdb
  systemctl stop    ovn-northd
  systemctl disable ovn-northd
}

function start-worker()
{

  systemctl start   openvswitch
  systemctl enable  openvswitch
  systemctl start   ovn-controller
  systemctl enable  ovn-controller
  systemctl start   ovn-controller-vtep
  systemctl enable  ovn-controller-vtep

  sudo ovs-vsctl set open . external-ids:ovn-bridge=br-int
  #sudo ovs-vsctl set open . external-ids:ovn-encap-type=geneve,vxlan
  sudo ovs-vsctl set open . external-ids:ovn-encap-type=geneve
  sudo ovs-vsctl set open . external-ids:ovn-remote=tcp:$MASTER:6642
  sudo ovs-vsctl set open . external-ids:ovn-encap-ip=$THISIP 
}

function stop-worker()
{
  systemctl stop    ovn-controller
  systemctl disable ovn-controller
  systemctl stop    ovn-controller-vtep
  systemctl disable ovn-controller-vtep
}


###########################################################
##
##  L2 bridge
##
##########################################################


function create-bridge()
{
  name=$(echo $* | awk -F"--name" '{print$2}' | awk '{print$1}')
  nic=$(echo $* | awk -F"--nic" '{print$2}' | awk '{print$1}')
  vlan=$(echo $* | awk -F"--vlan" '{print$2}' | awk '{print$1}')

  if [[ -z $1 || -z $name || -z $nic || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--name  \tbridge name" >&2
    echo -e "--nic   \tnic name" >&2
    echo -e "--vlan  \tvlan id, default is \"vlan=0\"" >&2
    exit 1
  fi

  if [[ -z $vlan ]]
  then
    vlan=0
  fi

  ################################
  if [[ ! -f $IFCFG"ifcfg-BRX" ]]
  then
     echo DEVICE=BRX           >> /etc/sysconfig/network-scripts/ifcfg-BRX
     echo DEVICETYPE=ovs       >> /etc/sysconfig/network-scripts/ifcfg-BRX
     echo TYPE=OVSBridge       >> /etc/sysconfig/network-scripts/ifcfg-BRX
     echo ONBOOT=yes           >> /etc/sysconfig/network-scripts/ifcfg-BRX
  fi

  if [[ ! -f $IFCFG"ifcfg-ORG" ]]
  then
     echo TYPE=OVSPort         >> /etc/sysconfig/network-scripts/ifcfg-ORG
     echo DEVICE=ORG           >> /etc/sysconfig/network-scripts/ifcfg-ORG
     echo ONBOOT=yes           >> /etc/sysconfig/network-scripts/ifcfg-ORG
     echo DEVICETYPE=ovs       >> /etc/sysconfig/network-scripts/ifcfg-ORG
     echo OVS_BRIDGE=BRX       >> /etc/sysconfig/network-scripts/ifcfg-ORG
  fi
  ################################
  ################################
  res=$(systemctl status openvswitch | grep Active | awk -F":" '{print $2}' | awk '{print$1}')
  if [[ $res != "active" ]]
  then
    echo "please start openvswitch first" >&2
    exit 1
  fi

  if [[ ! -f $IFCFG"ifcfg-$nic" ]]
  then
    echo "wrong NIC name" >&2
    exit 1
  fi  

  ################################
  ################################
  
  if [[ ! -f $IFCFG"ifcfg-$nic.bak" ]]
  then
    cp $IFCFG"ifcfg-$nic" $IFCFG"ifcfg-$nic.bak"
  fi

  rm -rf $IFCFG"ifcfg-$nic"
  rm -rf $IFCFG"ifcfg-$name"

  mv $IFCFG"ifcfg-ORG" $IFCFG"ifcfg-$nic"
  mv $IFCFG"ifcfg-BRX" $IFCFG"ifcfg-$name"

  ovs-vsctl --if-exist del-br $name
  ovs-vsctl add-br $name
  ovs-vsctl add-br $name"-"$vlan $name $vlan
  ovs-vsctl set interface $name"-"$vlan type=internal

  static=$(cat $IFCFG"ifcfg-$nic.bak" | grep BOOTPROTO | grep static)
  ip=$(cat $IFCFG"ifcfg-$nic.bak" | grep IPADDR)
  mask=$(cat $IFCFG"ifcfg-$nic.bak" | grep NETMASK)
  prefix=$(cat $IFCFG"ifcfg-$nic.bak" |  grep PREFIX)
  gw=$(cat $IFCFG"ifcfg-$nic.bak" | grep GATEWAY)
  dns=$(cat $IFCFG"ifcfg-$nic.bak" | grep DNS)
  
  sed -i "s/BRX/$name/g" $IFCFG"ifcfg-$name"
  sed -i "s/BRX/$name/g" $IFCFG"ifcfg-$nic"
  sed -i "s/ORG/$nic/g" $IFCFG"ifcfg-$nic"
  if [[ -z $static ]]
  then
    echo "BOOTPROTO=dhcp" >> $IFCFG"ifcfg-$name"
  else
    echo $ip >> $IFCFG"ifcfg-$name"
    echo $mask >> $IFCFG"ifcfg-$name"
    echo $prefix >> $IFCFG"ifcfg-$name"
    echo $gw >> $IFCFG"ifcfg-$name"
    echo $dns >> $IFCFG"ifcfg-$name"
  fi

  ovs-vsctl add-port $name $nic && ifdown $nic && ifup $nic && ifup $name
  ip link set dev $nic promisc on
  ip link set dev $name promisc on
}

function delete-bridge()
{
  name=$(echo $* | awk -F"--name" '{print$2}' | awk '{print$1}')
  nic=$(echo $* | awk -F"--nic" '{print$2}' | awk '{print$1}')

  if [[ -z $1 || -z $nic || -z $nic || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--name  \tbridge name" >&2
    echo -e "--nic   \tnic name" >&2
    exit 1
  fi

  ################################
  res=$(systemctl status openvswitch | grep Active | awk -F":" '{print $2}' | awk '{print$1}')
  if [[ $res != "active" ]]
  then
    echo "please start openvswitch first" >&2
    exit 1
  fi

  if [[ ! -f $IFCFG"ifcfg-$nic" ]]
  then
    echo "wrong NIC name" >&2
    exit 1
  fi

  ################################

  rm -rf $IFCFG"ifcfg-$name"

  if [[ ! -f $IFCFG"ifcfg-$nic.bak" ]]
  then
    echo "$nic is not a part of openvswitch" >&2
    exit 1
  fi 
  rm -rf $IFCFG"ifcfg-$nic"

 
  mv -f $IFCFG"ifcfg-$nic.bak" $IFCFG"ifcfg-$nic"

  ovs-vsctl --if-exist del-br $name && ifdown $nic && ifup $nic

}

###########################################################
##
##  L3 switch
##
##########################################################

function create-switch()
{
  name=$(echo $* | awk -F"--name" '{print$2}' | awk '{print$1}')
  subn=$(echo $* | awk -F"--subnet" '{print$2}' | awk '{print$1}')
  gway=$(echo $* | awk -F"--gateway" '{print$2}' | awk '{print$1}')
  imtu=$(echo $* | awk -F"--mtu" '{print$2}' | awk '{print$1}')
  excl=$(echo $* | awk -F"--excludeIPs" '{print$2}' | awk '{print$1}')
  dnss=$(echo $* | awk -F"--dnsServer" '{print$2}' | awk '{print$1}')
  
  if [[ -z $1 || -z $name || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--name       \tswitch name" >&2
    echo -e "--subnet     \toptinal, IP range. for example, 192.168.1.0/24"  >&2
    echo -e "--gateway    \toptinal, gateway.  for example, 192.168.1.1"  >&2
    echo -e "--mtu        \toptinal, mtu.  for example, 1480"  >&2
    echo -e "--excludeIPs \toptinal, excludeIPs.  192.168.1.1,192.168.1.10..192.168.1.100"  >&2
    echo -e "--dnsServer  \toptinal, dnsServer.  192.168.1.1"  >&2
    exit 1
  fi

  sid=$($NB_CMD ls-list | grep "($name)" | awk '{print$1}')
  if [[ -n $sid ]]
  then
    echo "cannot connect the master or the switch name exists" >&2
    exit 1
  fi
 
  $NB_CMD ls-add $name
  $NB_CMD set Logical_Switch $name other_config:subnet=$subn

  if [[ -n $excl ]]
  then
    nexcl=$(echo ${excl//,/ })
    $NB_CMD set Logical_Switch $name other_config:exclude_ips="$nexcl"
  fi
 

  rip=$(echo $subn | awk -F"." '{print$1"."$2"."$3}')".1"
  if [[ -n $gway ]]
  then
    rip=$gway
  fi
   
  router='r4'$name
  $NB_CMD lr-add $router
   
  rport='rp4'$name
  rmac=$(printf '00:60:2F:%02X:%02X:%02X\n' $[RANDOM%256] $[RANDOM%256] $[RANDOM%256])
  rmk=$(echo $subn | awk -F"/" '{print$2}')
  $NB_CMD lrp-add $router $rport $rmac $rip"/"$rmk
  
  sport='sp4'$name
  $NB_CMD lsp-add $name $sport
  $NB_CMD lsp-set-type $sport router
  $NB_CMD lsp-set-addresses $sport $rmac
  $NB_CMD lsp-set-options $sport router-port=$rport


  mtu="1500"
  if [[ -n $imtu ]]
  then
    mtu=$imtu
  fi

  if [[ -z $dnss ]]
  then
    did=$($NB_CMD create DHCP_Options cidr=$subn options="\"server_id\"=\"$rip\" \"server_mac\"=\"$rmac\" \"lease_time\"=\"3600\" \"router\"=\"$rip\" \"mtu\"=\"$mtu\"")
  else
    did=$($NB_CMD create DHCP_Options cidr=$subn options="\"server_id\"=\"$rip\" \"server_mac\"=\"$rmac\" \"lease_time\"=\"3600\" \"router\"=\"$rip\" \"mtu\"=\"$mtu\" \"dns_server\"=\"$dnss\"")
  fi

  $NB_CMD lsp-add $name "dhcpv4id-$name-"$did

  ## step 1
  gwrn="gw"$name
  join="join4"$name
  jmac=$(printf '00:60:2F:%02X:%02X:%02X\n' $[RANDOM%256] $[RANDOM%256] $[RANDOM%256])

  $NB_CMD create Logical_Router name=$gwrn options:chassis=3f8042ca-7716-4044-b421-1652991c626b
  $NB_CMD ls-add $join

  $NB_CMD lrp-add $gwrn $gwrn"-join" $jmac 192.168.255.1/24
  $NB_CMD lsp-add $join "join-"$gwrn
  $NB_CMD lsp-set-type "join-"$gwrn router
  $NB_CMD lsp-set-addresses "join-"$gwrn $jmac
  $NB_CMD lsp-set-options "join-"$gwrn router-port=$gwrn"-join"

  ## step 2

  kmac=$(printf '00:60:2F:%02X:%02X:%02X\n' $[RANDOM%256] $[RANDOM%256] $[RANDOM%256])
  $NB_CMD lrp-add $router $router"-join" $kmac 192.168.255.2/24
  $NB_CMD lsp-add $join "join-"$router
  $NB_CMD lsp-set-type "join-"$router router
  $NB_CMD lsp-set-addresses "join-"$router $kmac
  $NB_CMD lsp-set-options "join-"$router router-port=$router"-join"

  nrip=$(echo $subn | awk -F"." '{print$1"."$2"."$3}')".0"
  $NB_CMD lr-route-add $gwrn   "$nrip/$rmk" 192.168.255.2
  $NB_CMD lr-route-add $router "0.0.0.0/0" 192.168.255.1

  ## step 3
  outf="outflow4"$name
  lmac=$(printf '00:60:2F:%02X:%02X:%02X\n' $[RANDOM%256] $[RANDOM%256] $[RANDOM%256])

  nnip=$(echo $THISIP | awk -F"." '{print$1"."$2"."$3}')".250"
  $NB_CMD lrp-add $gwrn $gwrn"-outflow" $lmac $nnip"/"$rmk

  $NB_CMD ls-add $outf
  $NB_CMD lsp-add $outf "outflow-"$gwrn
  $NB_CMD lsp-set-type "outflow-"$gwrn router
  $NB_CMD lsp-set-addresses "outflow-"$gwrn $lmac
  $NB_CMD lsp-set-options "outflow-"$gwrn router-port=$gwrn"-outflow"

  ovn-nbctl -- --id=@nat create nat type="snat" logical_ip=$subn external_ip=$nnip -- add logical_router $gwrn nat @nat

}


function bind-fip()
{
  switch=$(echo $* | awk -F"--swName" '{print$2}' | awk '{print$1}')
  vmmac=$(echo $* | awk -F"--vmmac" '{print$2}' | awk '{print$1}')
  fip=$(echo $* | awk -F"--fip" '{print$2}' | awk '{print$1}')
 
  if [[ -z $1 || -z $switch || -z $vmmac || -z $fip || $2 == "--help" ]]
  then
    echo -e "--swName  \tswitch name" >&2
    echo -e "--vmmac   \tvm mac" >&2
    echo -e "--fip     \tflating ip" >&2
    exit 1
  fi

  vmip=$($NB_CMD list logical_switch_port  | grep "$vmmac" | awk -F"\"" '{print$2}' | awk '{print$2}')

  outf="outflow4"$switch
  $NB_CMD lsp-add $outf $outf"-localnet"
  $NB_CMD lsp-set-addresses $outf"-localnet" unknown
  $NB_CMD lsp-set-type $outf"-localnet" localnet
  $NB_CMD lsp-set-options $outf"-localnet" network_name=$outf

  ovs-vsctl set Open_vSwitch . external-ids:ovn-bridge-mappings=$outf:br-ex

  $NB_CMD -- --id=@nat create nat type="dnat_and_snat" logical_ip=$vmip external_ip=$fip -- add logical_router "gw"$switch nat @nat  
}

function unbind-fip()
{
  switch=$(echo $* | awk -F"--swName" '{print$2}' | awk '{print$1}')
  vmmac=$(echo $* | awk -F"--vmmac" '{print$2}' | awk '{print$1}')
  fip=$(echo $* | awk -F"--fip" '{print$2}' | awk '{print$1}')

  if [[ -z $1 || -z $switch || -z $vmmac || -z $fip ||  $2 == "--help" ]]
  then
    cmddesc
    echo -e "--switch  \tswitch name" >&2
    echo -e "--vmmac   \tvm mac" >&2
    echo -e "--fip     \tfip" >&2
    exit 1
  fi

  $NB_CMD ls-del "public-"$switch

  $NB_CMD lr-nat-del "r4"$switch dnat_and_snat $fip
}

function delete-switch()
{
  name=$(echo $* | awk -F"--name" '{print$2}' | awk '{print$1}')
  
  if [[ -z $1 || -z $name || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--name  \tswitch name" >&2
    exit 1
  fi

  sid=$($NB_CMD ls-list | grep "($name)" | awk '{print$1}')
  if [[ -z $sid ]]
  then
    echo "cannot connect the master or the switch name does not exist" >&2
    exit 1
  fi
  
  router='r4'$name
  dhcpid=$($NB_CMD show $name | grep "dhcpv4id-$name-" | awk -F"dhcpv4id-$name-" '{print$2}')
  $NB_CMD ls-del $name  >/dev/null  2>&1 
  $NB_CMD ls-del "outflow4"$name  >/dev/null  2>&1 
  $NB_CMD ls-del "join4"$name  >/dev/null  2>&1 
  $NB_CMD ls-del $name  >/dev/null  2>&1 
  $NB_CMD lr-del $router >/dev/null  2>&1
  $NB_CMD lr-del "gw"$name >/dev/null  2>&1
  $NB_CMD dhcp-options-del $dhcpid >/dev/null  2>&1  
}


### vm 
function create-vm()
{
  name=$(echo $* | awk -F"--name" '{print$2}' | awk '{print$1}')
  switch=$(echo $* | awk -F"--switch" '{print$2}' | awk '{print$1}')
  nic=$(echo $* | awk -F"--nic" '{print$2}' | awk '{print$1}')
  mac=$(echo $* | awk -F"--mac" '{print$2}' | awk '{print$1}')
  ip=$(echo $* | awk -F"--ip" '{print$2}' | awk '{print$1}')
  gway=$(echo $* | awk -F"--gateway" '{print$2}' | awk '{print$1}')

  if [[ -z $1 || -z $name || -z $nic || -z $mac || -z gway || -z $ip || $2 == "--help" ]]
  then
    echo -e "--name       \tVM name" >&2
    echo -e "--switch     \tSee kubeovn create-switch" >&2
    echo -e "--nic        \tNIC"  >&2
    echo -e "--mac        \tMac"  >&2
    echo -e "--ip         \tIP"  >&2
    echo -e "--gateway    \tGateway"  >&2
    exit 1
  fi

  sudo ip netns add $name
  sudo ip link add $name-$nic type veth peer name veth-$name
  sudo ip link set veth-$name up
  sudo ip link set $name-$nic netns $name
  sudo ip netns exec $name ip link set $name-$nic addres $mac
  sudo ip netns exec $name ip link set $name-$nic up
  sudo ovs-vsctl add-port br-int veth-$name

  sudo $NB_CMD lsp-add $switch $switch-$name
  sudo $NB_CMD lsp-set-addresses $switch-$name "$mac $ip"
  
  sudo ovs-vsctl set Interface  veth-$name external_ids:iface-id=$switch-$name
  sudo ip netns exec $name ip addr add $ip/24 dev $name-$nic
  sudo ip netns exec $name ip route add default via $gway
}

function delete-vm()
{
  name=$(echo $* | awk -F"--name" '{print$2}' | awk '{print$1}')
  
  if [[ -z $1 || -z $name || $2 == "--help" ]]
  then
    echo -e "--name       \tVM name" >&2
    exit 1
  fi

  sudo $NB_CMD lsp-del "vpc1-"$name
  sudo ovs-vsctl del-port br-int "veth-"$name
  sudo ip netns del $name
}

function help()
{
  echo -e "Commands:"
  echo -e "  start-central  :\t(Init): start central node"
  echo -e "  stop-central   :\t(Init): stop  central node"
  echo -e "  start-worker   :\t(Init): start worker  node"
  echo -e "  stop-worker    :\t(Init): stop  worker  node"
  echo -e "  create-bridge  :\t(L2  ): create L2 bridge"
  echo -e "  delete-bridge  :\t(L2  ): delete L2 bridge"
  echo -e "  create-switch  :\t(L3  ): create L3 switch and gateway"
  echo -e "  delete-switch  :\t(L3  ): delete L3 switch and gateway"
  echo -e "  bind-fip       :\t(L3  ): bind floating IP"
  echo -e "  unbind-fip     :\t(L3  ): unbind floating IP"
  echo -e "  create-vm      :\t(Simu): create a VM"
  echo -e "  delete-vm      :\t(Simu): delete a VM"
}

case $1 in
  "start-central")
    start-central $*
    ;;
  "stop-central")
    stop-central $*
    ;;
  "start-worker")
    start-worker $*
    ;;
  "stop-worker")
    stop-worker $*
    ;;
  "create-bridge")
    create-bridge $*
    ;;
  "delete-bridge")
    delete-bridge $*
    ;;
  "create-switch")
    create-switch $*
    ;;
  "delete-switch")
    delete-switch $*
    ;;
  "bind-fip")
    bind-fip $*
    ;;
  "unbind-fip")
    unbind-fip $*
    ;;
  "create-vm")
    create-vm $*
    ;;
  "delete-vm")
    delete-vm $*
    ;;
  *)
  help
  ;;
esac
